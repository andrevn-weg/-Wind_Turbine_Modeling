"""
P√°gina 7: An√°lise de Turbinas E√≥licas

Esta p√°gina apresenta o sistema completo de an√°lise de turbinas e√≥licas, incluindo:
- Par√¢metros Iniciais: Sele√ß√£o de localidade, turbina, altura, per√≠odo
- Perfil Vertical do Vento: Lei de Pot√™ncia e Lei Logar√≠tmica
- Componentes do Vento: Vento m√©dio, ondas e turbul√™ncia
- Simula√ß√£o de Turbina: C√°lculos de Cp e estimativa de gera√ß√£o
- Resultados e Relat√≥rios: Visualiza√ß√µes e recomenda√ß√µes

Baseado nas diretrizes do guia de desenvolvimento das p√°ginas de an√°lise.
"""

import streamlit as st
import sys
from pathlib import Path
import pandas as pd
from datetime import datetime, timedelta
import traceback

def handle_analysis_error(error, context=""):
    """Fun√ß√£o para tratar erros espec√≠ficos da an√°lise."""
    st.error(f"""
    üö® **Erro na An√°lise**
    
    **Contexto:** {context}
    **Erro:** {str(error)}
    
    üí° **Solu√ß√µes:**
    - Verifique se todos os dados necess√°rios est√£o dispon√≠veis
    - Recarregue a p√°gina e tente novamente
    - Verifique as configura√ß√µes dos par√¢metros
    """)
    
    with st.expander("üîß Detalhes do Erro"):
        st.code(traceback.format_exc(), language="python")

# Adicionar src ao path para imports
src_path = Path(__file__).parent.parent.parent / "src"
sys.path.insert(0, str(src_path))

# Importar p√°ginas de an√°lise com tratamento de erro
try:
    from web.pages.analysis.initial_parameters import render_initial_parameters_tab
    from web.pages.analysis.wind_profile_analysis import render_wind_profile_tab
    from web.pages.analysis.wind_components_analysis import render_wind_components_tab
    from web.pages.analysis.turbine_simulation import render_turbine_simulation_tab
    from web.pages.analysis.results_reports import render_results_reports_tab
except ImportError as e:
    st.error(f"""
    ‚ùå **Erro de Importa√ß√£o dos M√≥dulos de An√°lise**
    
    N√£o foi poss√≠vel carregar os m√≥dulos necess√°rios para an√°lise.
    
    **Erro:** {str(e)}
    
    **Solu√ß√µes:**
    1. Verifique se todos os arquivos de an√°lise est√£o presentes
    2. Reinstale as depend√™ncias do projeto
    3. Contate o suporte t√©cnico
    """)
    
    # Criar fun√ß√µes vazias como fallback
    def render_initial_parameters_tab():
        st.error("M√≥dulo de par√¢metros iniciais n√£o dispon√≠vel")
    
    def render_wind_profile_tab():
        st.error("M√≥dulo de an√°lise de perfil de vento n√£o dispon√≠vel")
    
    def render_wind_components_tab():
        st.error("M√≥dulo de componentes do vento n√£o dispon√≠vel")
    
    def render_turbine_simulation_tab():
        st.error("M√≥dulo de simula√ß√£o de turbina n√£o dispon√≠vel")
    
    def render_results_reports_tab():
        st.error("M√≥dulo de resultados e relat√≥rios n√£o dispon√≠vel")


def main():
    """Fun√ß√£o principal da p√°gina de an√°lise."""
    
    try:
        # Configurar tema dos gr√°ficos
        try:
            from analysis_tools.visualization import AnalysisVisualizer
            AnalysisVisualizer.configure_plotly_theme()
        except Exception as e:
            st.warning("‚ö†Ô∏è N√£o foi poss√≠vel configurar o tema dos gr√°ficos. Usando tema padr√£o.")
        
        # Header principal
        st.markdown("""
        <div class="page-main-header">
            <h1>üî¨ An√°lise de Turbinas E√≥licas</h1>
            <p>Sistema completo de simula√ß√£o e an√°lise de viabilidade e√≥lica</p>
        </div>
        """, unsafe_allow_html=True)
        
        # Sidebar com informa√ß√µes
        st.sidebar.header("üìä Sistema de An√°lise")
        st.sidebar.info("""
        **Fluxo de An√°lise:**
        
        1. üìã **Par√¢metros Iniciais** - Definir localidade e turbina
        2. üìè **Perfil de Vento** - An√°lise vertical do vento
        3. üåä **Componentes** - Simula√ß√£o de vento real
        4. ‚öôÔ∏è **Simula√ß√£o** - Performance da turbina
        5. üìà **Resultados** - Relat√≥rios e recomenda√ß√µes
        
        **üí° Dica:** Complete cada etapa sequencialmente para melhor an√°lise.
        """)
        
        # Inicializar session state para an√°lise
        if 'analysis_state' not in st.session_state:
            st.session_state.analysis_state = {
                'cidade_selected': None,
                'turbina_selected': None,
                'altura_turbina': 80.0,
                'periodo_analise': None,
                'wind_profile_data': None,
                'wind_components_data': None,
                'turbine_performance_data': None,
                'analysis_complete': False
            }
        
        # Verificar disponibilidade de dados
        try:
            verificar_prerequisites()
        except Exception as e:
            st.sidebar.error(f"Erro ao verificar pr√©-requisitos: {str(e)}")
        
    except Exception as e:
        handle_analysis_error(e, "Inicializa√ß√£o da P√°gina")
    
    # Interface principal com tabs
    tab1, tab2, tab3, tab4, tab5 = st.tabs([
        "üìã Par√¢metros Iniciais",
        "üìè Perfil de Vento", 
        "üåä Componentes do Vento",
        "‚öôÔ∏è Simula√ß√£o de Turbina",
        "üìà Resultados e Relat√≥rios"
    ])
    
    with tab1:
        try:
            render_initial_parameters_tab()
        except Exception as e:
            handle_analysis_error(e, "Par√¢metros Iniciais")
    
    with tab2:
        try:
            render_wind_profile_tab()
        except Exception as e:
            handle_analysis_error(e, "An√°lise do Perfil de Vento")
    
    with tab3:
        try:
            render_wind_components_tab()
        except Exception as e:
            handle_analysis_error(e, "Componentes do Vento")
    
    with tab4:
        try:
            render_turbine_simulation_tab()
        except Exception as e:
            handle_analysis_error(e, "Simula√ß√£o da Turbina")
    
    with tab5:
        try:
            render_results_reports_tab()
        except Exception as e:
            handle_analysis_error(e, "Resultados e Relat√≥rios")
    
    # Footer com status da an√°lise
    try:
        render_analysis_status_footer()
    except Exception as e:
        st.warning(f"Erro ao carregar status da an√°lise: {str(e)}")


def verificar_prerequisites():
    """Verifica se os pr√©-requisitos para an√°lise est√£o atendidos."""
    
    try:
        # Verificar dados meteorol√≥gicos
        from meteorological.meteorological_data.repository import MeteorologicalDataRepository
        met_repo = MeteorologicalDataRepository()
        total_dados = len(met_repo.listar_todos())
        
        # Verificar turbinas cadastradas
        from turbine_parameters.aerogenerators.repository import AerogeneratorRepository
        turb_repo = AerogeneratorRepository()
        total_turbinas = turb_repo.contar_total()
        
        # Verificar cidades
        from geographic.cidade.repository import CidadeRepository
        cidade_repo = CidadeRepository()
        total_cidades = cidade_repo.contar_total()
        
        # Mostrar alertas se necess√°rio
        warnings = []
        
        if total_cidades == 0:
            warnings.append("‚ùå Nenhuma cidade cadastrada")
        
        if total_dados == 0:
            warnings.append("‚ùå Nenhum dado meteorol√≥gico dispon√≠vel")
        
        if total_turbinas == 0:
            warnings.append("‚ùå Nenhuma turbina cadastrada")
        
        if warnings:
            st.sidebar.markdown("### ‚ö†Ô∏è Pr√©-requisitos")
            for warning in warnings:
                st.sidebar.warning(warning)
            
            st.sidebar.markdown("""
            **Para usar o sistema de an√°lise:**
            1. Cadastre pelo menos uma cidade
            2. Colete dados meteorol√≥gicos
            3. Cadastre par√¢metros de turbinas
            """)
        else:
            st.sidebar.success(f"""
            ‚úÖ **Sistema Pronto**
            - {total_cidades} cidades
            - {total_dados} dados meteorol√≥gicos  
            - {total_turbinas} turbinas
            """)
    
    except Exception as e:
        st.sidebar.error(f"Erro ao verificar pr√©-requisitos: {str(e)}")


def render_analysis_status_footer():
    """Renderiza o footer com status da an√°lise atual."""
    
    st.markdown("---")
    st.markdown("### üìä Status da An√°lise Atual")
    
    state = st.session_state.analysis_state
    
    col1, col2, col3, col4, col5 = st.columns(5)
    
    with col1:
        status = "‚úÖ" if state.get('cidade_selected') and state.get('turbina_selected') else "‚è∏Ô∏è"
        st.metric("Par√¢metros", status)
    
    with col2:
        status = "‚úÖ" if state.get('wind_profile_data') else "‚è∏Ô∏è"
        st.metric("Perfil Vento", status)
    
    with col3:
        status = "‚úÖ" if state.get('wind_components_data') else "‚è∏Ô∏è"
        st.metric("Componentes", status)
    
    with col4:
        status = "‚úÖ" if state.get('turbine_performance_data') else "‚è∏Ô∏è"
        st.metric("Simula√ß√£o", status)
    
    with col5:
        status = "‚úÖ" if state.get('analysis_complete') else "‚è∏Ô∏è"
        st.metric("An√°lise", status)
    
    # Progresso geral
    progress_items = [
        bool(state.get('cidade_selected') and state.get('turbina_selected')),
        bool(state.get('wind_profile_data')),
        bool(state.get('wind_components_data')),
        bool(state.get('turbine_performance_data')),
        bool(state.get('analysis_complete'))
    ]
    
    progress = sum(progress_items) / len(progress_items) if progress_items else 0
    st.progress(progress)
    st.caption(f"Progresso da an√°lise: {progress:.0%}")
    
    # Informa√ß√µes t√©cnicas
    if state.get('cidade_selected') or state.get('turbina_selected'):
        with st.expander("üîß Detalhes T√©cnicos da An√°lise"):
            if state.get('cidade_selected'):
                cidade_info = state['cidade_selected']
                if isinstance(cidade_info, dict) and 'cidade' in cidade_info:
                    cidade_nome = cidade_info['cidade'].nome
                    st.write(f"**üèôÔ∏è Cidade:** {cidade_nome}")
                else:
                    st.write(f"**üèôÔ∏è Cidade:** {cidade_info}")
            
            if state.get('turbina_selected'):
                turbina_info = state['turbina_selected']
                if hasattr(turbina_info, 'modelo'):
                    st.write(f"**‚öôÔ∏è Turbina:** {turbina_info.modelo}")
                else:
                    st.write(f"**‚öôÔ∏è Turbina:** {turbina_info}")
            
            if state.get('altura_turbina'):
                st.write(f"**üìè Altura:** {state['altura_turbina']} m")
            
            if state.get('periodo_analise'):
                periodo = state['periodo_analise']
                if isinstance(periodo, dict):
                    data_inicio = periodo.get('data_inicio', 'N/A')
                    data_fim = periodo.get('data_fim', 'N/A')
                    dias_total = periodo.get('dias_total', 'N/A')
                    st.write(f"**üìÖ Per√≠odo:** {data_inicio} a {data_fim} ({dias_total} dias)")
                else:
                    st.write(f"**üìÖ Per√≠odo:** {periodo}")


if __name__ == "__main__":
    try:
        main()
    except Exception as e:
        st.error(f"""
        # üö® Erro Cr√≠tico na P√°gina de An√°lise
        
        A p√°gina de an√°lise encontrou um erro inesperado.
        
        **Erro:** {str(e)}
        
        **Solu√ß√µes:**
        1. Recarregue a p√°gina (F5)
        2. Verifique se todos os dados necess√°rios est√£o cadastrados
        3. Contate o suporte t√©cnico se o problema persistir
        """)
        
        with st.expander("üîß Detalhes T√©cnicos"):
            st.code(traceback.format_exc(), language="python")
        
        # Bot√µes de recupera√ß√£o
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üîÑ Recarregar P√°gina", type="primary"):
                st.rerun()
        
        with col2:
            if st.button("üè† Voltar ao Home"):
                st.switch_page("src/web/pages/0_home.py")
