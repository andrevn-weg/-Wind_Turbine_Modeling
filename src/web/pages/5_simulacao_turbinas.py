"""
P√°gina de Simula√ß√£o de Turbinas - Sistema de Modelagem e Simula√ß√£o.

Esta p√°gina permite simular o comportamento de turbinas e√≥licas
com base em dados clim√°ticos e par√¢metros t√©cnicos.

Autor: Andr√© Vin√≠cius Lima do Nascimento
Data: Janeiro 2025
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import numpy as np
from pathlib import Path
import os
import sys

# Adicionar src ao path
project_root = Path(__file__).parent.parent.parent
sys.path.insert(0, str(project_root))

# Imports do projeto
from utils.css_loader import load_css
from climate import (
    ColetaDadosService,
    AnaliseEolicaService,
    LocalizacaoClimaticaRepository,
    DadosClimaticosRepository
)

# Carregar CSS
css_path = os.path.join(project_root, "web", "static", "styles.css")
load_css(css_path)

def main():
    """Fun√ß√£o principal da p√°gina de simula√ß√£o de turbinas."""
    
    # T√≠tulo da p√°gina
    st.markdown("""
    <div class="page-main-header">
        <h1>‚ö° Simula√ß√£o de <span style="color: rgb(155, 89, 182);">Turbinas</span></h1>
        <p>Modelagem e Simula√ß√£o de Turbinas E√≥licas</p>
    </div>
    """, unsafe_allow_html=True)
    
    st.markdown("---")
    
    # Inicializar servi√ßos
    coleta_service = ColetaDadosService()
    analise_service = AnaliseEolicaService()
    localizacao_repo = LocalizacaoClimaticaRepository()
    dados_repo = DadosClimaticosRepository()
    
    # Tabs para diferentes tipos de simula√ß√£o
    tabs = st.tabs([
        "üéØ Simula√ß√£o R√°pida", 
        "üîß Configura√ß√£o Avan√ßada", 
        "üìä An√°lise de Performance",
        "üí° Otimiza√ß√£o"
    ])
    
    with tabs[0]:
        simulacao_rapida_tab(coleta_service, analise_service)
    
    with tabs[1]:
        configuracao_avancada_tab(localizacao_repo, dados_repo)
    
    with tabs[2]:
        analise_performance_tab(dados_repo, localizacao_repo)
    
    with tabs[3]:
        otimizacao_tab()

def simulacao_rapida_tab(coleta_service, analise_service):
    """Tab para simula√ß√£o r√°pida de turbina."""
    
    st.markdown("### üéØ Simula√ß√£o R√°pida")
    st.markdown("Configure uma simula√ß√£o b√°sica de turbina e√≥lica rapidamente.")
    
    # Par√¢metros da turbina
    st.markdown("#### ‚öôÔ∏è Par√¢metros da Turbina")
    
    col1, col2 = st.columns(2)
    
    with col1:
        potencia_nominal = st.number_input(
            "Pot√™ncia Nominal (kW)",
            min_value=0.1,
            max_value=10000.0,
            value=2000.0,
            step=100.0,
            help="Pot√™ncia nominal da turbina em kilowatts"
        )
        
        diametro_rotor = st.number_input(
            "Di√¢metro do Rotor (m)",
            min_value=1.0,
            max_value=200.0,
            value=80.0,
            step=1.0,
            help="Di√¢metro do rotor da turbina em metros"
        )
        
        altura_hub = st.number_input(
            "Altura do Hub (m)",
            min_value=10.0,
            max_value=200.0,
            value=80.0,
            step=5.0,
            help="Altura do centro do rotor em metros"
        )
    
    with col2:
        vel_corte_inicial = st.number_input(
            "Velocidade de Corte Inicial (m/s)",
            min_value=1.0,
            max_value=10.0,
            value=3.0,
            step=0.5,
            help="Velocidade m√≠nima do vento para gerar energia"
        )
        
        vel_nominal = st.number_input(
            "Velocidade Nominal (m/s)",
            min_value=5.0,
            max_value=20.0,
            value=12.0,
            step=0.5,
            help="Velocidade do vento para pot√™ncia nominal"
        )
        
        vel_corte_final = st.number_input(
            "Velocidade de Corte Final (m/s)",
            min_value=15.0,
            max_value=40.0,
            value=25.0,
            step=1.0,
            help="Velocidade m√°xima de opera√ß√£o segura"
        )
    
    # Dados de vento
    st.markdown("#### üå™Ô∏è Dados de Vento")
    
    tipo_dados = st.radio(
        "Fonte dos Dados de Vento",
        ["Coletar dados online", "Usar dados simulados", "Dados personalizados"],
        help="Escolha a fonte dos dados de vento para simula√ß√£o"
    )
    
    dados_vento = None
    
    if tipo_dados == "Coletar dados online":
        with st.expander("üåç Configurar Coleta de Dados"):
            col1, col2 = st.columns(2)
            
            with col1:
                latitude = st.number_input("Latitude", value=-26.52, format="%.6f")
                longitude = st.number_input("Longitude", value=-49.06, format="%.6f")
            
            with col2:
                nome_local = st.text_input("Nome do Local", value="Local da Simula√ß√£o")
                periodo_dias = st.selectbox("Per√≠odo (dias)", [7, 15, 30, 60, 90], index=2)
            
            if st.button("üì• Coletar Dados"):
                with st.spinner("Coletando dados de vento..."):
                    try:
                        dados_vento = coleta_service.coletar_dados_historicos(
                            latitude, longitude, nome_local, periodo_dias
                        )
                        
                        if dados_vento:
                            st.success(f"‚úÖ Coletados {len(dados_vento)} registros de vento!")
                            st.session_state['dados_vento_simulacao'] = dados_vento
                        else:
                            st.error("N√£o foi poss√≠vel coletar dados de vento.")
                    
                    except Exception as e:
                        st.error(f"Erro ao coletar dados: {str(e)}")
    
    elif tipo_dados == "Usar dados simulados":
        with st.expander("üé≤ Configurar Dados Simulados"):
            col1, col2, col3 = st.columns(3)
            
            with col1:
                vel_media = st.number_input("Velocidade M√©dia (m/s)", value=8.0, min_value=1.0, max_value=20.0)
                desvio_padrao = st.number_input("Desvio Padr√£o (m/s)", value=2.0, min_value=0.1, max_value=5.0)
            
            with col2:
                num_pontos = st.number_input("N√∫mero de Pontos", value=1000, min_value=100, max_value=10000)
                semente = st.number_input("Semente Aleat√≥ria", value=42, min_value=1, max_value=1000)
            
            with col3:
                distribuicao = st.selectbox("Distribui√ß√£o", ["Normal", "Weibull", "Exponencial"])
                incluir_sazonalidade = st.checkbox("Incluir Sazonalidade", value=True)
            
            if st.button("üé≤ Gerar Dados Simulados"):
                dados_vento = gerar_dados_vento_simulados(
                    vel_media, desvio_padrao, num_pontos, semente, 
                    distribuicao, incluir_sazonalidade
                )
                
                if dados_vento:
                    st.success(f"‚úÖ Gerados {len(dados_vento)} pontos de dados simulados!")
                    st.session_state['dados_vento_simulacao'] = dados_vento
    
    else:  # Dados personalizados
        st.info("üîú Funcionalidade de upload de dados personalizados ser√° implementada em vers√£o futura.")
    
    # Verificar se h√° dados de vento na sess√£o
    if 'dados_vento_simulacao' in st.session_state:
        dados_vento = st.session_state['dados_vento_simulacao']
    
    # Executar simula√ß√£o
    st.markdown("---")
    
    if st.button("‚ö° Executar Simula√ß√£o", type="primary"):
        if dados_vento:
            with st.spinner("Executando simula√ß√£o da turbina..."):
                try:
                    resultados = executar_simulacao_turbina(
                        dados_vento, potencia_nominal, diametro_rotor, altura_hub,
                        vel_corte_inicial, vel_nominal, vel_corte_final
                    )
                    
                    if resultados:
                        mostrar_resultados_simulacao(resultados, dados_vento)
                    
                except Exception as e:
                    st.error(f"Erro na simula√ß√£o: {str(e)}")
        else:
            st.warning("‚ö†Ô∏è Por favor, configure os dados de vento antes de executar a simula√ß√£o.")

def configuracao_avancada_tab(localizacao_repo, dados_repo):
    """Tab para configura√ß√£o avan√ßada de simula√ß√£o."""
    
    st.markdown("### üîß Configura√ß√£o Avan√ßada")
    st.markdown("Configure simula√ß√µes detalhadas com par√¢metros avan√ßados.")
    
    # Sele√ß√£o de localidade com dados existentes
    localidades = localizacao_repo.listar_todas()
    
    if localidades:
        st.markdown("#### üìç Selecionar Localidade")
        
        nomes_localidades = [f"{loc.nome} ({loc.latitude:.4f}, {loc.longitude:.4f})" 
                           for loc in localidades]
        
        localidade_idx = st.selectbox(
            "Localidade com Dados",
            range(len(nomes_localidades)),
            format_func=lambda x: nomes_localidades[x],
            help="Selecione uma localidade com dados hist√≥ricos"
        )
        
        localidade_selecionada = localidades[localidade_idx]
        
        # Verificar dados dispon√≠veis
        dados_disponiveis = dados_repo.obter_por_localizacao(localidade_selecionada.id)
        
        if dados_disponiveis:
            st.success(f"‚úÖ {len(dados_disponiveis)} registros de dados dispon√≠veis")
            
            # Mostrar per√≠odo dos dados
            datas = [d.data_medicao for d in dados_disponiveis]
            data_inicio = min(datas)
            data_fim = max(datas)
            
            st.info(f"üìÖ Per√≠odo dos dados: {data_inicio.strftime('%d/%m/%Y')} a {data_fim.strftime('%d/%m/%Y')}")
        else:
            st.warning("‚ö†Ô∏è Nenhum dado encontrado para esta localidade.")
    
    else:
        st.info("üìç Cadastre localidades na p√°gina 'Coleta de Dados' para usar dados hist√≥ricos.")
    
    # Configura√ß√µes avan√ßadas da turbina
    st.markdown("#### ‚öôÔ∏è Configura√ß√µes Avan√ßadas da Turbina")
    
    with st.expander("üîß Par√¢metros T√©cnicos Detalhados"):
        col1, col2 = st.columns(2)
        
        with col1:
            st.markdown("**Caracter√≠sticas Aerodin√¢micas:**")
            coef_potencia_max = st.number_input("Coeficiente de Pot√™ncia M√°ximo", value=0.45, min_value=0.1, max_value=0.6, step=0.01)
            tip_speed_ratio = st.number_input("Tip Speed Ratio √ìtimo", value=7.0, min_value=3.0, max_value=12.0, step=0.1)
            eficiencia_gearbox = st.number_input("Efici√™ncia da Caixa de Engrenagens (%)", value=95.0, min_value=80.0, max_value=99.0, step=1.0)
            eficiencia_gerador = st.number_input("Efici√™ncia do Gerador (%)", value=93.0, min_value=80.0, max_value=98.0, step=1.0)
        
        with col2:
            st.markdown("**Caracter√≠sticas Ambientais:**")
            densidade_ar = st.number_input("Densidade do Ar (kg/m¬≥)", value=1.225, min_value=1.0, max_value=1.4, step=0.01)
            rugosidade_terreno = st.selectbox("Rugosidade do Terreno", 
                                            ["0.0002 - Mar aberto", "0.03 - Campo aberto", "0.1 - Sub√∫rbio", "0.4 - Cidade"])
            correcao_altura = st.checkbox("Aplicar Corre√ß√£o de Altura", value=True)
            fator_disponibilidade = st.number_input("Fator de Disponibilidade (%)", value=95.0, min_value=80.0, max_value=100.0, step=1.0)
    
    st.info("üîú Simula√ß√£o avan√ßada ser√° implementada em vers√£o futura com todos os par√¢metros t√©cnicos.")

def analise_performance_tab(dados_repo, localizacao_repo):
    """Tab para an√°lise de performance."""
    
    st.markdown("### üìä An√°lise de Performance")
    st.markdown("Analise a performance esperada de turbinas em diferentes condi√ß√µes.")
    
    # Localidades para an√°lise
    localidades = localizacao_repo.listar_todas()
    
    if not localidades:
        st.info("üìç Cadastre localidades com dados para realizar an√°lises de performance.")
        return
    
    # Sele√ß√£o m√∫ltipla de localidades
    nomes_localidades = [f"{loc.nome} ({loc.latitude:.4f}, {loc.longitude:.4f})" 
                        for loc in localidades]
    
    localidades_selecionadas = st.multiselect(
        "Localidades para An√°lise",
        nomes_localidades,
        default=nomes_localidades[:1] if nomes_localidades else [],
        help="Selecione uma ou mais localidades para comparar"
    )
    
    if localidades_selecionadas:
        # An√°lise de viabilidade
        st.markdown("#### üìà An√°lise de Viabilidade")
        
        for nome_local in localidades_selecionadas:
            # Encontrar localidade correspondente
            idx = nomes_localidades.index(nome_local)
            localidade = localidades[idx]
            
            # Obter dados
            dados = dados_repo.obter_por_localizacao(localidade.id)
            
            if dados:
                with st.expander(f"üìä {localidade.nome}"):
                    analisar_viabilidade_localidade(dados, localidade.nome)
            else:
                st.warning(f"‚ö†Ô∏è Sem dados para {localidade.nome}")

def otimizacao_tab():
    """Tab para otimiza√ß√£o de turbinas."""
    
    st.markdown("### üí° Otimiza√ß√£o")
    st.markdown("Encontre a configura√ß√£o √≥tima de turbina para suas condi√ß√µes.")
    
    st.info("üîú Funcionalidade de otimiza√ß√£o ser√° implementada em vers√£o futura.")
    
    # Preview do que ser√° implementado
    with st.expander("üîÆ Preview - Funcionalidades Futuras"):
        st.markdown("""
        **Funcionalidades de Otimiza√ß√£o Planejadas:**
        
        1. **Otimiza√ß√£o de Altura do Hub**
           - An√°lise de perfil de vento vertical
           - Custo-benef√≠cio por altura
           - Recomenda√ß√£o de altura √≥tima
        
        2. **Sele√ß√£o de Turbina**
           - Compara√ß√£o de diferentes modelos
           - An√°lise de ROI por turbina
           - Recomenda√ß√£o baseada em condi√ß√µes locais
        
        3. **Layout do Parque E√≥lico**
           - Otimiza√ß√£o de espa√ßamento
           - Minimiza√ß√£o de efeitos de esteira
           - Maximiza√ß√£o de produ√ß√£o total
        
        4. **An√°lise Financeira**
           - C√°lculo de LCOE
           - An√°lise de viabilidade econ√¥mica
           - Proje√ß√£o de retorno de investimento
        """)

def gerar_dados_vento_simulados(vel_media, desvio_padrao, num_pontos, semente, 
                               distribuicao, incluir_sazonalidade):
    """Gera dados de vento simulados."""
    
    np.random.seed(semente)
    
    # Gerar timestamps
    inicio = datetime.now() - timedelta(days=num_pontos//24)
    timestamps = [inicio + timedelta(hours=i) for i in range(num_pontos)]
    
    # Gerar velocidades base
    if distribuicao == "Normal":
        velocidades = np.random.normal(vel_media, desvio_padrao, num_pontos)
    elif distribuicao == "Weibull":
        # Par√¢metros aproximados para Weibull
        k = 2.0  # Par√¢metro de forma
        scale = vel_media / (np.exp(1/k) * np.sqrt(np.pi/k))
        velocidades = np.random.weibull(k, num_pontos) * scale
    else:  # Exponencial
        velocidades = np.random.exponential(vel_media, num_pontos)
    
    # Garantir valores positivos
    velocidades = np.maximum(velocidades, 0.1)
    
    # Adicionar sazonalidade se solicitado
    if incluir_sazonalidade:
        for i, timestamp in enumerate(timestamps):
            # Varia√ß√£o sazonal (ciclo anual)
            dia_ano = timestamp.timetuple().tm_yday
            fator_sazonal = 1 + 0.2 * np.sin(2 * np.pi * dia_ano / 365)
            
            # Varia√ß√£o di√°ria
            hora = timestamp.hour
            fator_diario = 1 + 0.1 * np.sin(2 * np.pi * hora / 24)
            
            velocidades[i] *= fator_sazonal * fator_diario
    
    # Criar objetos de dados clim√°ticos simulados
    from climate.models.entity import DadosClimaticos
    
    dados_simulados = []
    for i, timestamp in enumerate(timestamps):
        dado = DadosClimaticos(
            data_medicao=timestamp,
            velocidade_vento=velocidades[i],
            temperatura=20.0 + 5 * np.sin(2 * np.pi * timestamp.timetuple().tm_yday / 365),
            umidade=60.0 + 20 * np.random.random(),
            pressao=1013.25 + 10 * np.random.random()
        )
        dados_simulados.append(dado)
    
    return dados_simulados

def executar_simulacao_turbina(dados_vento, potencia_nominal, diametro_rotor, altura_hub,
                              vel_corte_inicial, vel_nominal, vel_corte_final):
    """Executa simula√ß√£o b√°sica de turbina e√≥lica."""
    
    try:
        # √Årea do rotor
        area_rotor = np.pi * (diametro_rotor / 2) ** 2
        
        # Densidade do ar (padr√£o ao n√≠vel do mar)
        densidade_ar = 1.225
        
        resultados = []
        
        for dado in dados_vento:
            velocidade = dado.velocidade_vento
            
            # Aplicar curva de pot√™ncia simplificada
            if velocidade < vel_corte_inicial:
                potencia = 0.0
            elif velocidade < vel_nominal:
                # Curva c√∫bica entre corte inicial e nominal
                fator = (velocidade - vel_corte_inicial) / (vel_nominal - vel_corte_inicial)
                potencia = potencia_nominal * (fator ** 3)
            elif velocidade < vel_corte_final:
                # Pot√™ncia nominal entre velocidade nominal e corte final
                potencia = potencia_nominal
            else:
                # Turbina desligada por seguran√ßa
                potencia = 0.0
            
            # Calcular energia (assumindo 1 hora por ponto)
            energia = potencia  # kWh para 1 hora
            
            # Pot√™ncia dispon√≠vel no vento
            potencia_vento = 0.5 * densidade_ar * area_rotor * (velocidade ** 3) / 1000  # kW
            
            # Coeficiente de pot√™ncia
            cp = potencia / potencia_vento if potencia_vento > 0 else 0
            cp = min(cp, 0.59)  # Limite de Betz
            
            resultado = {
                'timestamp': dado.data_medicao,
                'velocidade_vento': velocidade,
                'potencia_gerada': potencia,
                'energia_gerada': energia,
                'potencia_vento': potencia_vento,
                'coeficiente_potencia': cp,
                'temperatura': dado.temperatura
            }
            
            resultados.append(resultado)
        
        return resultados
        
    except Exception as e:
        st.error(f"Erro na simula√ß√£o: {str(e)}")
        return None

def mostrar_resultados_simulacao(resultados, dados_vento):
    """Mostra os resultados da simula√ß√£o."""
    
    st.markdown("### üìä Resultados da Simula√ß√£o")
    
    # Converter para DataFrame
    df = pd.DataFrame(resultados)
    
    # M√©tricas principais
    energia_total = df['energia_gerada'].sum()
    potencia_media = df['potencia_gerada'].mean()
    fator_capacidade = (potencia_media / df['potencia_gerada'].max()) * 100 if df['potencia_gerada'].max() > 0 else 0
    horas_operacao = len(df[df['potencia_gerada'] > 0])
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric("Energia Total", f"{energia_total:.1f} kWh")
    
    with col2:
        st.metric("Pot√™ncia M√©dia", f"{potencia_media:.1f} kW")
    
    with col3:
        st.metric("Fator de Capacidade", f"{fator_capacidade:.1f}%")
    
    with col4:
        st.metric("Horas de Opera√ß√£o", f"{horas_operacao}/{len(df)}")
    
    # Gr√°ficos
    st.markdown("#### üìà Gr√°ficos de Performance")
    
    # Gr√°fico de pot√™ncia vs velocidade
    fig_potencia = px.scatter(
        df,
        x='velocidade_vento',
        y='potencia_gerada',
        title='Curva de Pot√™ncia',
        labels={'velocidade_vento': 'Velocidade do Vento (m/s)', 'potencia_gerada': 'Pot√™ncia (kW)'},
        color='coeficiente_potencia',
        color_continuous_scale='viridis'
    )
    fig_potencia.update_layout(height=400)
    st.plotly_chart(fig_potencia, use_container_width=True)
    
    # S√©rie temporal de pot√™ncia
    fig_serie = px.line(
        df,
        x='timestamp',
        y='potencia_gerada',
        title='Produ√ß√£o de Energia ao Longo do Tempo',
        labels={'potencia_gerada': 'Pot√™ncia (kW)', 'timestamp': 'Data/Hora'}
    )
    fig_serie.update_layout(height=400)
    st.plotly_chart(fig_serie, use_container_width=True)
    
    # Distribui√ß√£o de velocidades e pot√™ncia
    col1, col2 = st.columns(2)
    
    with col1:
        fig_hist_vento = px.histogram(
            df,
            x='velocidade_vento',
            title='Distribui√ß√£o de Velocidades do Vento',
            labels={'velocidade_vento': 'Velocidade (m/s)', 'count': 'Frequ√™ncia'}
        )
        fig_hist_vento.update_layout(height=300)
        st.plotly_chart(fig_hist_vento, use_container_width=True)
    
    with col2:
        fig_hist_potencia = px.histogram(
            df,
            x='potencia_gerada',
            title='Distribui√ß√£o de Pot√™ncia Gerada',
            labels={'potencia_gerada': 'Pot√™ncia (kW)', 'count': 'Frequ√™ncia'}
        )
        fig_hist_potencia.update_layout(height=300)
        st.plotly_chart(fig_hist_potencia, use_container_width=True)
    
    # Tabela de estat√≠sticas
    st.markdown("#### üìã Estat√≠sticas Detalhadas")
    
    estatisticas = {
        'M√©trica': [
            'Energia Total (kWh)',
            'Energia M√©dia Di√°ria (kWh)',
            'Pot√™ncia M√°xima (kW)',
            'Pot√™ncia M√©dia (kW)',
            'Fator de Capacidade (%)',
            'Horas de Opera√ß√£o',
            'Velocidade M√©dia do Vento (m/s)',
            'Velocidade M√°xima do Vento (m/s)',
            'Coeficiente de Pot√™ncia M√©dio'
        ],
        'Valor': [
            f"{energia_total:.1f}",
            f"{energia_total / (len(df) / 24):.1f}",
            f"{df['potencia_gerada'].max():.1f}",
            f"{potencia_media:.1f}",
            f"{fator_capacidade:.1f}",
            f"{horas_operacao}",
            f"{df['velocidade_vento'].mean():.2f}",
            f"{df['velocidade_vento'].max():.2f}",
            f"{df['coeficiente_potencia'].mean():.3f}"
        ]
    }
    
    df_stats = pd.DataFrame(estatisticas)
    st.dataframe(df_stats, use_container_width=True, hide_index=True)

def analisar_viabilidade_localidade(dados, nome_localidade):
    """Analisa a viabilidade e√≥lica de uma localidade."""
    
    # Calcular estat√≠sticas b√°sicas
    velocidades = [d.velocidade_vento for d in dados]
    vel_media = np.mean(velocidades)
    vel_max = np.max(velocidades)
    vel_min = np.min(velocidades)
    
    # Classifica√ß√£o do potencial e√≥lico
    if vel_media >= 7.0:
        classificacao = "üü¢ Excelente"
        cor = "green"
    elif vel_media >= 5.5:
        classificacao = "üü° Bom"
        cor = "orange"
    elif vel_media >= 4.0:
        classificacao = "üü† Moderado"
        cor = "orange"
    else:
        classificacao = "üî¥ Baixo"
        cor = "red"
    
    # M√©tricas
    col1, col2, col3 = st.columns(3)
    
    with col1:
        st.metric("Velocidade M√©dia", f"{vel_media:.2f} m/s")
        st.metric("Velocidade M√°xima", f"{vel_max:.2f} m/s")
    
    with col2:
        st.markdown(f"**Potencial E√≥lico:** {classificacao}")
        
        # Estimar fator de capacidade
        if vel_media >= 7.0:
            fator_capacidade_est = 35
        elif vel_media >= 5.5:
            fator_capacidade_est = 25
        elif vel_media >= 4.0:
            fator_capacidade_est = 15
        else:
            fator_capacidade_est = 5
        
        st.metric("Fator de Capacidade Estimado", f"{fator_capacidade_est}%")
    
    with col3:
        # Horas com vento √∫til (>3 m/s)
        horas_uteis = len([v for v in velocidades if v >= 3.0])
        percent_uteis = (horas_uteis / len(velocidades)) * 100
        
        st.metric("Horas com Vento √ötil", f"{percent_uteis:.1f}%")
        st.metric("Dados Analisados", f"{len(dados)} registros")
    
    # Gr√°fico de distribui√ß√£o
    df_local = pd.DataFrame({'velocidade': velocidades})
    
    fig_hist = px.histogram(
        df_local,
        x='velocidade',
        title=f'Distribui√ß√£o de Velocidades - {nome_localidade}',
        labels={'velocidade': 'Velocidade do Vento (m/s)', 'count': 'Frequ√™ncia'}
    )
    fig_hist.update_layout(height=300)
    st.plotly_chart(fig_hist, use_container_width=True)

if __name__ == "__main__":
    main()
