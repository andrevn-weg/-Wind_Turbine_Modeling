"""
P√°gina 8: An√°lise Simplificada de Turbinas E√≥licas

Esta p√°gina oferece uma an√°lise direta e integrada:
- Sele√ß√£o de cidade e turbina do banco de dados
- Previs√£o de gera√ß√£o usando lei de pot√™ncia ou logar√≠tmica
- An√°lise de tempo operacional (inoperante, MPPT, nominal, cut-out)
- Dados meteorol√≥gicos reais (OpenMeteo ou NASA Power)
"""

import streamlit as st
import sys
from pathlib import Path
import pandas as pd
import numpy as np
from datetime import datetime, timedelta
import plotly.graph_objects as go
import plotly.express as px
from plotly.subplots import make_subplots
import io
import base64

# Adicionar src ao path para imports
src_path = Path(__file__).parent.parent.parent / "src"
sys.path.insert(0, str(src_path))

# Imports dos reposit√≥rios
from meteorological.meteorological_data.repository import MeteorologicalDataRepository
from meteorological.meteorological_data_source.repository import MeteorologicalDataSourceRepository
from geographic import CidadeRepository, RegiaoRepository, PaisRepository
from turbine_parameters.aerogenerators.repository import AerogeneratorRepository
from turbine_parameters.manufacturers.repository import ManufacturerRepository


# Fun√ß√µes auxiliares para downloads
def gerar_csv_download(dataframe, nome_arquivo):
    """Gera um link de download para CSV"""
    try:
        csv = dataframe.to_csv(index=False, encoding='utf-8-sig')
        b64 = base64.b64encode(csv.encode('utf-8-sig')).decode()
        href = f'<a href="data:file/csv;base64,{b64}" download="{nome_arquivo}.csv" class="download-button">üì• Download CSV - {nome_arquivo}</a>'
        return href
    except Exception as e:
        st.error(f"Erro ao gerar CSV: {str(e)}")
        return None


def gerar_excel_download(dataframe, nome_arquivo):
    """Gera um link de download para Excel"""
    try:
        output = io.BytesIO()
        with pd.ExcelWriter(output, engine='openpyxl') as writer:
            dataframe.to_excel(writer, index=False, sheet_name='An√°lise')
        
        output.seek(0)
        b64 = base64.b64encode(output.read()).decode()
        href = f'<a href="data:application/vnd.openxmlformats-officedocument.spreadsheetml.sheet;base64,{b64}" download="{nome_arquivo}.xlsx" class="download-button">üìä Download Excel - {nome_arquivo}</a>'
        return href
    except Exception as e:
        st.error(f"Erro ao gerar Excel: {str(e)}")
        return None


def criar_secao_download(dataframe, nome_base, titulo_secao):
    """Cria uma se√ß√£o com op√ß√µes de download para um DataFrame"""
    if dataframe is not None and not dataframe.empty:
        with st.expander(f"üì• Downloads - {titulo_secao}"):
            col1, col2 = st.columns(2)
            
            with col1:
                csv_link = gerar_csv_download(dataframe, f"{nome_base}_csv")
                if csv_link:
                    st.markdown(csv_link, unsafe_allow_html=True)
            
            with col2:
                excel_link = gerar_excel_download(dataframe, f"{nome_base}_excel")
                if excel_link:
                    st.markdown(excel_link, unsafe_allow_html=True)
            
            st.markdown("---")
            st.caption(f"üìä Total de registros: {len(dataframe)}")
    else:
        st.warning(f"‚ö†Ô∏è Nenhum dado dispon√≠vel para download em {titulo_secao}")


def calcular_velocidade_corrigida(velocidade_10m, altura_alvo, metodo, parametros):
    """
    Calcula velocidade do vento na altura da turbina usando lei de pot√™ncia ou logar√≠tmica.
    
    Args:
        velocidade_10m: Velocidade do vento a 10m (m/s)
        altura_alvo: Altura da turbina (m)
        metodo: 'potencia' ou 'logaritmica'
        parametros: dict com par√¢metros espec√≠ficos do m√©todo
    
    Returns:
        Velocidade corrigida na altura da turbina
    """
    altura_ref = 10.0  # Altura de refer√™ncia dos dados meteorol√≥gicos
    
    if metodo == 'potencia':
        # Lei de Pot√™ncia: v(h) = v_ref * (h/h_ref)^n
        n = parametros.get('n', 0.2)  # Expoente t√≠pico para terreno aberto
        return velocidade_10m * (altura_alvo / altura_ref) ** n
    
    elif metodo == 'logaritmica':
        # Lei Logar√≠tmica: v(h) = v_ref * ln(h/z0) / ln(h_ref/z0)
        z0 = parametros.get('z0', 0.1)  # Rugosidade t√≠pica para pastagem
        if altura_alvo <= z0 or altura_ref <= z0:
            return velocidade_10m  # Evitar divis√£o por zero ou log negativo
        return velocidade_10m * np.log(altura_alvo / z0) / np.log(altura_ref / z0)
    
    return velocidade_10m


def calcular_potencia_turbina(velocidade, turbina_specs):
    """
    Calcula a pot√™ncia gerada pela turbina baseada na velocidade do vento.
    Usa uma curva de pot√™ncia simplificada.
    
    Args:
        velocidade: Velocidade do vento (m/s)
        turbina_specs: Especifica√ß√µes da turbina
    
    Returns:
        Pot√™ncia em kW
    """
    # Converter todos os valores para float para evitar problemas com Decimal
    cut_in = float(turbina_specs['cut_in_speed'])
    cut_out = float(turbina_specs['cut_out_speed'])
    rated_speed = float(turbina_specs.get('rated_wind_speed', 12.0))
    rated_power = float(turbina_specs['rated_power_kw'])
    velocidade = float(velocidade)
    
    if velocidade < cut_in or velocidade > cut_out:
        return 0.0
    elif velocidade <= rated_speed:
        # Regi√£o MPPT - curva c√∫bica simplificada
        return rated_power * ((velocidade - cut_in) / (rated_speed - cut_in)) ** 3
    else:
        # Regi√£o nominal - pot√™ncia constante
        return rated_power


def classificar_estado_operacional(velocidade, turbina_specs):
    """
    Classifica o estado operacional da turbina baseado na velocidade.
    
    Returns:
        'inoperante', 'mppt', 'nominal', ou 'cut_out'
    """
    # Converter todos os valores para float para evitar problemas com Decimal
    cut_in = float(turbina_specs['cut_in_speed'])
    cut_out = float(turbina_specs['cut_out_speed'])
    rated_speed = float(turbina_specs.get('rated_wind_speed', 12.0))
    velocidade = float(velocidade)
    
    if velocidade < cut_in:
        return 'inoperante'
    elif velocidade > cut_out:
        return 'cut_out'
    elif velocidade <= rated_speed:
        return 'mppt'
    else:
        return 'nominal'


def exibir_resultados():
    """Exibe os resultados da an√°lise simplificada."""
    
    try:
        dados = st.session_state['analise_simplificada']
        df_resultados = dados['df_resultados']
        cidade_info = dados['cidade_info']
        turbina_info = dados['turbina_info']
        parametros = dados['parametros_analise']
        
        st.markdown("---")
        st.markdown("##  Resultados da An√°lise")
        
        # Informa√ß√µes gerais
        col1, col2, col3 = st.columns(3)
        
        try:
            with col1:
                st.info(f"""
                **üèôÔ∏è Localiza√ß√£o**
                {cidade_info['cidade'].nome}, {cidade_info['regiao'].nome}
                Lat: {cidade_info['cidade'].latitude:.4f}¬∞
                Lon: {cidade_info['cidade'].longitude:.4f}¬∞
                """)
        except Exception:
            with col1:
                st.info("**üèôÔ∏è Localiza√ß√£o**\nInforma√ß√µes n√£o dispon√≠veis")
        
        try:
            with col2:
                st.info(f"""
                **üåÄ Turbina**
                {turbina_info.model}
                Pot√™ncia: {turbina_info.rated_power_kw:,} kW
                Di√¢metro: {turbina_info.rotor_diameter_m} m
                """)
        except Exception:
            with col2:
                st.info("**üåÄ Turbina**\nInforma√ß√µes n√£o dispon√≠veis")
        
        try:
            with col3:
                st.info(f"""
                **‚öôÔ∏è Configura√ß√£o**
                M√©todo: {parametros['metodo'].title()}
                Altura: {parametros['altura']} m
                Fonte: {parametros['fonte'].title()}
                """)
        except Exception:
            with col3:
                st.info("**‚öôÔ∏è Configura√ß√£o**\nInforma√ß√µes n√£o dispon√≠veis")
        
    except Exception as e:
        st.error(f"‚ùå Erro ao carregar dados da an√°lise: {str(e)}")
        return
    
    # Estat√≠sticas de gera√ß√£o
    st.markdown("""
    <div class="wind-info-card slide-in">
        <h4 class="wind-info-title">‚ö° Estat√≠sticas de Gera√ß√£o</h4>
    </div>
    """, unsafe_allow_html=True)
    
    try:
        # Calcular m√©tricas
        potencia_media = df_resultados['potencia_kw'].mean()
        potencia_maxima = df_resultados['potencia_kw'].max()
        
        # Calcular energia total baseada na frequ√™ncia dos dados
        num_registros = len(df_resultados)
        if num_registros > 0:
            # Assumir que dados s√£o hor√°rios se temos aproximadamente 24 registros por dia
            registros_por_dia = num_registros / parametros['periodo']
            if registros_por_dia >= 20:  # Dados hor√°rios
                energia_total_kwh = df_resultados['potencia_kw'].sum()
            else:  # Dados menos frequentes, estimar
                energia_total_kwh = df_resultados['potencia_kw'].sum() * (24 / registros_por_dia)
        else:
            energia_total_kwh = 0
        
        # Estat√≠sticas por estado operacional
        estados_count = df_resultados['estado_operacional'].value_counts()
        total_registros = len(df_resultados)
        
        col1, col2, col3, col4 = st.columns(4)
        
        try:
            with col1:
                st.metric(
                    "Pot√™ncia M√©dia",
                    f"{potencia_media:.1f} kW",
                    delta=f"{(potencia_media/float(turbina_info.rated_power_kw))*100:.1f}% da nominal"
                )
        except Exception:
            with col1:
                st.metric("Pot√™ncia M√©dia", f"{potencia_media:.1f} kW")
        
        try:
            with col2:
                st.metric(
                    "Energia Estimada",
                    f"{energia_total_kwh:.0f} kWh",
                    delta=f"em {parametros['periodo']} dias"
                )
        except Exception:
            with col2:
                st.metric("Energia Estimada", f"{energia_total_kwh:.0f} kWh")
        
        try:
            with col3:
                velocidade_media = df_resultados['velocidade_corrigida'].mean()
                st.metric(
                    "Velocidade M√©dia",
                    f"{velocidade_media:.1f} m/s",
                    delta=f"na altura {parametros['altura']}m"
                )
        except Exception:
            with col3:
                st.metric("Velocidade M√©dia", "N/A")
        
        try:
            with col4:
                fator_capacidade = (potencia_media / float(turbina_info.rated_power_kw)) * 100
                st.metric(
                    "Fator de Capacidade",
                    f"{fator_capacidade:.1f}%",
                    delta="Efici√™ncia geral"
                )
        except Exception:
            with col4:
                st.metric("Fator de Capacidade", "N/A")
                
    except Exception as metrics_error:
        st.error(f"‚ùå Erro ao calcular estat√≠sticas: {str(metrics_error)}")
        return
    
    # Tabela de tempo operacional
    st.markdown("""
    <div class="wind-info-card slide-in">
        <h4 class="wind-info-title">‚è±Ô∏è An√°lise de Tempo Operacional</h4>
    </div>
    """, unsafe_allow_html=True)
    
    try:
        # Calcular porcentagens
        porcentagens = {}
        for estado in ['inoperante', 'mppt', 'nominal', 'cut_out']:
            count = estados_count.get(estado, 0)
            porcentagem = (count / total_registros) * 100 if total_registros > 0 else 0
            porcentagens[estado] = porcentagem
        
        # Criar DataFrame para tabela
        df_estados = pd.DataFrame([
            {
                'Estado Operacional': 'üî¥ Inoperante',
                'Descri√ß√£o': f'v < {float(turbina_info.cut_in_speed):.1f} m/s (cut-in)',
                'Tempo (%)': f"{porcentagens['inoperante']:.1f}%",
                'Registros': estados_count.get('inoperante', 0)
            },
            {
                'Estado Operacional': 'üü° MPPT',
                'Descri√ß√£o': f'{float(turbina_info.cut_in_speed):.1f} ‚â§ v ‚â§ {float(turbina_info.rated_wind_speed):.1f} m/s',
                'Tempo (%)': f"{porcentagens['mppt']:.1f}%",
                'Registros': estados_count.get('mppt', 0)
            },
            {
                'Estado Operacional': 'üü¢ Nominal',
                'Descri√ß√£o': f'{float(turbina_info.rated_wind_speed):.1f} < v ‚â§ {float(turbina_info.cut_out_speed):.1f} m/s',
                'Tempo (%)': f"{porcentagens['nominal']:.1f}%",
                'Registros': estados_count.get('nominal', 0)
            },
            {
                'Estado Operacional': 'üî¥ Cut-out',
                'Descri√ß√£o': f'v > {float(turbina_info.cut_out_speed):.1f} m/s (seguran√ßa)',
                'Tempo (%)': f"{porcentagens['cut_out']:.1f}%",
                'Registros': estados_count.get('cut_out', 0)
            }
        ])
        
        st.dataframe(df_estados, use_container_width=True, hide_index=True)
        
    except Exception as table_error:
        st.error(f"‚ùå Erro ao gerar tabela de estados operacionais: {str(table_error)}")
        # Tabela b√°sica como fallback
        try:
            st.write("**Estados Operacionais (valores aproximados):**")
            for estado, count in estados_count.items():
                porcentagem = (count / total_registros) * 100 if total_registros > 0 else 0
                st.write(f"- {estado.title()}: {porcentagem:.1f}% ({count} registros)")
        except Exception:
            st.write("Dados de estados operacionais n√£o dispon√≠veis.")
    
    # Gr√°ficos de an√°lise
    st.markdown("""
    <div class="wind-info-card slide-in">
        <h4 class="wind-info-title">üìà Visualiza√ß√µes</h4>
    </div>
    """, unsafe_allow_html=True)
    
    try:
        # Gr√°fico de pizza dos estados operacionais
        try:
            fig_pie = px.pie(
                values=[porcentagens[estado] for estado in ['inoperante', 'mppt', 'nominal', 'cut_out']],
                names=['Inoperante', 'MPPT', 'Nominal', 'Cut-out'],
                title="Distribui√ß√£o do Tempo Operacional",
                color_discrete_map={
                    'Inoperante': '#ff4444',
                    'MPPT': '#ffaa00', 
                    'Nominal': '#44ff44',
                    'Cut-out': '#ff0000'
                }
            )
        except Exception as pie_error:
            st.warning(f"‚ö†Ô∏è Erro ao gerar gr√°fico de pizza: {str(pie_error)}")
            fig_pie = None
        
        # Gr√°fico temporal de pot√™ncia
        try:
            fig_temporal = px.line(
                df_resultados,
                x='datetime',
                y='potencia_kw',
                title="Pot√™ncia Gerada ao Longo do Tempo",
                labels={'potencia_kw': 'Pot√™ncia (kW)', 'datetime': 'Data/Hora'}
            )
            fig_temporal.add_hline(y=float(turbina_info.rated_power_kw), line_dash="dash", 
                                  annotation_text="Pot√™ncia Nominal")
        except Exception as temporal_error:
            st.warning(f"‚ö†Ô∏è Erro ao gerar gr√°fico temporal: {str(temporal_error)}")
            fig_temporal = None
        
        # Histograma de velocidades
        try:
            fig_hist = px.histogram(
                df_resultados,
                x='velocidade_corrigida',
                nbins=30,
                title="Distribui√ß√£o de Velocidades do Vento",
                labels={'velocidade_corrigida': 'Velocidade (m/s)', 'count': 'Frequ√™ncia'}
            )
            fig_hist.add_vline(x=float(turbina_info.cut_in_speed), line_dash="dash", 
                               annotation_text="Cut-in")
            fig_hist.add_vline(x=float(turbina_info.cut_out_speed), line_dash="dash", 
                               annotation_text="Cut-out")
            fig_hist.add_vline(x=float(turbina_info.rated_wind_speed), line_dash="dash", 
                               annotation_text="Nominal")
        except Exception as hist_error:
            st.warning(f"‚ö†Ô∏è Erro ao gerar histograma: {str(hist_error)}")
            fig_hist = None
        
        # Exibir gr√°ficos
        col1, col2 = st.columns(2)
        
        try:
            with col1:
                if fig_pie:
                    st.plotly_chart(fig_pie, use_container_width=True)
                else:
                    st.info("Gr√°fico de pizza n√£o dispon√≠vel")
        except Exception:
            with col1:
                st.info("Erro ao exibir gr√°fico de pizza")
        
        try:
            with col2:
                if fig_hist:
                    st.plotly_chart(fig_hist, use_container_width=True)
                else:
                    st.info("Histograma n√£o dispon√≠vel")
        except Exception:
            with col2:
                st.info("Erro ao exibir histograma")
        
        try:
            if fig_temporal:
                st.plotly_chart(fig_temporal, use_container_width=True)
            else:
                st.info("Gr√°fico temporal n√£o dispon√≠vel")
        except Exception:
            st.info("Erro ao exibir gr√°fico temporal")
            
    except Exception as viz_error:
        st.error(f"‚ùå Erro geral nas visualiza√ß√µes: {str(viz_error)}")
        st.info("Visualiza√ß√µes n√£o dispon√≠veis neste momento.")
    
    # Dados di√°rios agregados
    st.markdown("""
    <div class="wind-info-card slide-in">
        <h4 class="wind-info-title">üìÖ Previs√£o M√©dia Di√°ria</h4>
    </div>
    """, unsafe_allow_html=True)
    
    try:
        # Agregar por dia
        df_diario = df_resultados.groupby('data').agg({
            'potencia_kw': ['mean', 'max', 'sum'],
            'velocidade_corrigida': 'mean',
            'estado_operacional': lambda x: (x == 'nominal').sum() / len(x) * 100
        }).round(2)
        
        # Flatten column names
        df_diario.columns = ['Pot√™ncia M√©dia (kW)', 'Pot√™ncia M√°xima (kW)', 
                            'Energia Di√°ria (kWh)', 'Velocidade M√©dia (m/s)', 
                            'Tempo Nominal (%)']
        
        # Mostrar √∫ltimos 10 dias
        st.dataframe(df_diario.tail(10), use_container_width=True)
        
        # Op√ß√µes de download para dados di√°rios
        criar_secao_download(df_diario, "dados_diarios", "Previs√£o M√©dia Di√°ria")
        
    except Exception as daily_error:
        st.warning(f"‚ö†Ô∏è Erro ao gerar dados di√°rios: {str(daily_error)}")
        st.info("Dados di√°rios n√£o dispon√≠veis.")
    
    # An√°lise por m√™s
    st.markdown("""
    <div class="wind-info-card slide-in">
        <h4 class="wind-info-title">üìÖ An√°lise Mensal de Gera√ß√£o</h4>
    </div>
    """, unsafe_allow_html=True)
    
    try:
        # Criar coluna de m√™s-ano
        df_resultados['mes_ano'] = pd.to_datetime(df_resultados['datetime']).dt.to_period('M')
        
        # Agregar por m√™s
        df_mensal = df_resultados.groupby('mes_ano').agg({
            'potencia_kw': ['mean', 'max', 'sum'],
            'velocidade_corrigida': 'mean',
            'estado_operacional': lambda x: (x.isin(['mppt', 'nominal'])).sum() / len(x) * 100
        }).round(2)
        
        # Flatten column names
        df_mensal.columns = ['Pot√™ncia M√©dia (kW)', 'Pot√™ncia M√°xima (kW)', 
                            'Energia Total (kWh)', 'Velocidade M√©dia (m/s)', 
                            'Tempo Produtivo (%)']
        
        # Calcular energia m√©dia di√°ria por m√™s
        df_mensal['Energia M√©dia Di√°ria (kWh)'] = (df_mensal['Energia Total (kWh)'] / 
                                                   df_mensal.index.to_series().apply(lambda x: x.days_in_month)).round(2)
        
        # Exibir tabela mensal
        if len(df_mensal) > 0:
            st.dataframe(df_mensal, use_container_width=True)
            
            # Gr√°fico de gera√ß√£o mensal
            col1, col2 = st.columns(2)
            
            with col1:
                try:
                    fig_mensal_energia = px.bar(
                        x=df_mensal.index.astype(str),
                        y=df_mensal['Energia Total (kWh)'],
                        title="Energia Total por M√™s",
                        labels={'x': 'M√™s/Ano', 'y': 'Energia Total (kWh)'},
                        color=df_mensal['Energia Total (kWh)'],
                        color_continuous_scale='Blues'
                    )
                    fig_mensal_energia.update_layout(showlegend=False, coloraxis_showscale=False)
                    st.plotly_chart(fig_mensal_energia, use_container_width=True)
                except Exception:
                    st.info("Gr√°fico mensal de energia n√£o dispon√≠vel")
            
            with col2:
                try:
                    fig_mensal_produtivo = px.line(
                        x=df_mensal.index.astype(str),
                        y=df_mensal['Tempo Produtivo (%)'],
                        title="Tempo Produtivo por M√™s (%)",
                        labels={'x': 'M√™s/Ano', 'y': 'Tempo Produtivo (%)'},
                        markers=True
                    )
                    fig_mensal_produtivo.update_traces(line_color='green', marker_color='darkgreen')
                    fig_mensal_produtivo.add_hline(y=df_mensal['Tempo Produtivo (%)'].mean(), 
                                                  line_dash="dash", annotation_text="M√©dia")
                    st.plotly_chart(fig_mensal_produtivo, use_container_width=True)
                except Exception:
                    st.info("Gr√°fico mensal de produtividade n√£o dispon√≠vel")
            
            # Op√ß√µes de download para dados mensais
            criar_secao_download(df_mensal, "dados_mensais", "An√°lise Mensal")
            
        else:
            st.info("Dados insuficientes para an√°lise mensal.")
            
    except Exception as monthly_error:
        st.warning(f"‚ö†Ô∏è Erro ao gerar an√°lise mensal: {str(monthly_error)}")
        st.info("An√°lise mensal n√£o dispon√≠vel.")
    
    # An√°lise por dia da semana
    st.markdown("""
    <div class="wind-info-card slide-in">
        <h4 class="wind-info-title">üìä An√°lise por Dia da Semana</h4>
    </div>
    """, unsafe_allow_html=True)
    
    try:
        # Criar coluna de dia da semana
        df_resultados['dia_semana'] = pd.to_datetime(df_resultados['datetime']).dt.day_name()
        df_resultados['dia_semana_num'] = pd.to_datetime(df_resultados['datetime']).dt.dayofweek
        
        # Traduzir nomes dos dias para portugu√™s
        dias_pt = {
            'Monday': 'Segunda-feira',
            'Tuesday': 'Ter√ßa-feira', 
            'Wednesday': 'Quarta-feira',
            'Thursday': 'Quinta-feira',
            'Friday': 'Sexta-feira',
            'Saturday': 'S√°bado',
            'Sunday': 'Domingo'
        }
        df_resultados['dia_semana_pt'] = df_resultados['dia_semana'].map(dias_pt)
        
        # Agregar por dia da semana
        df_semanal = df_resultados.groupby(['dia_semana_num', 'dia_semana_pt']).agg({
            'potencia_kw': ['mean', 'std'],
            'velocidade_corrigida': 'mean',
            'estado_operacional': lambda x: (x.isin(['mppt', 'nominal'])).sum() / len(x) * 100
        }).round(2)
        
        # Flatten column names
        df_semanal.columns = ['Pot√™ncia M√©dia (kW)', 'Desvio Padr√£o (kW)', 
                             'Velocidade M√©dia (m/s)', 'Tempo Produtivo (%)']
        
        # Reset index para facilitar plotagem
        df_semanal = df_semanal.reset_index()
        df_semanal = df_semanal.sort_values('dia_semana_num')
        
        # Exibir tabela semanal
        st.dataframe(df_semanal[['dia_semana_pt', 'Pot√™ncia M√©dia (kW)', 'Desvio Padr√£o (kW)', 
                                'Velocidade M√©dia (m/s)', 'Tempo Produtivo (%)']].rename(
                                columns={'dia_semana_pt': 'Dia da Semana'}), 
                    use_container_width=True, hide_index=True)
        
        # Gr√°fico de gera√ß√£o por dia da semana
        col1, col2 = st.columns(2)
        
        with col1:
            try:
                fig_semanal = px.bar(
                    df_semanal,
                    x='dia_semana_pt',
                    y='Pot√™ncia M√©dia (kW)',
                    title="Pot√™ncia M√©dia por Dia da Semana",
                    labels={'dia_semana_pt': 'Dia da Semana', 'Pot√™ncia M√©dia (kW)': 'Pot√™ncia M√©dia (kW)'},
                    color='Pot√™ncia M√©dia (kW)',
                    color_continuous_scale='Viridis'
                )
                fig_semanal.update_layout(showlegend=False, coloraxis_showscale=False)
                fig_semanal.update_xaxes(tickangle=45)
                st.plotly_chart(fig_semanal, use_container_width=True)
            except Exception:
                st.info("Gr√°fico semanal n√£o dispon√≠vel")
        
        with col2:
            try:
                fig_velocidade_semanal = px.line(
                    df_semanal,
                    x='dia_semana_pt',
                    y='Velocidade M√©dia (m/s)',
                    title="Velocidade M√©dia do Vento por Dia",
                    labels={'dia_semana_pt': 'Dia da Semana', 'Velocidade M√©dia (m/s)': 'Velocidade (m/s)'},
                    markers=True
                )
                fig_velocidade_semanal.update_traces(line_color='orange', marker_color='darkorange')
                fig_velocidade_semanal.update_xaxes(tickangle=45)
                st.plotly_chart(fig_velocidade_semanal, use_container_width=True)
            except Exception:
                st.info("Gr√°fico de velocidade semanal n√£o dispon√≠vel")
        
        # Op√ß√µes de download para dados semanais
        criar_secao_download(df_semanal[['dia_semana_pt', 'Pot√™ncia M√©dia (kW)', 'Desvio Padr√£o (kW)', 
                                        'Velocidade M√©dia (m/s)', 'Tempo Produtivo (%)']].rename(
                                        columns={'dia_semana_pt': 'Dia da Semana'}), 
                            "dados_semanais", "An√°lise Semanal")
                
    except Exception as weekly_error:
        st.warning(f"‚ö†Ô∏è Erro ao gerar an√°lise semanal: {str(weekly_error)}")
        st.info("An√°lise semanal n√£o dispon√≠vel.")
    
    # An√°lise de correla√ß√µes
    st.markdown("""
    <div class="wind-info-card slide-in">
        <h4 class="wind-info-title">üîó Correla√ß√µes e An√°lises Avan√ßadas</h4>
    </div>
    """, unsafe_allow_html=True)
    
    try:
        # Matriz de correla√ß√£o
        correlation_data = df_resultados[['velocidade_10m', 'velocidade_corrigida', 'potencia_kw']]
        if 'temperatura' in df_resultados.columns:
            temp_data = df_resultados['temperatura'].dropna()
            if len(temp_data) > 0:
                correlation_data = df_resultados[['velocidade_10m', 'velocidade_corrigida', 'potencia_kw', 'temperatura']].dropna()
        
        if 'umidade' in df_resultados.columns:
            umid_data = df_resultados['umidade'].dropna()
            if len(umid_data) > 0 and 'temperatura' in correlation_data.columns:
                correlation_data = df_resultados[['velocidade_10m', 'velocidade_corrigida', 'potencia_kw', 'temperatura', 'umidade']].dropna()
        
        # Calcular correla√ß√µes
        corr_matrix = correlation_data.corr()
        
        col1, col2 = st.columns(2)
        
        with col1:
            try:
                # Heatmap de correla√ß√£o
                fig_corr = px.imshow(
                    corr_matrix,
                    title="Matriz de Correla√ß√£o",
                    color_continuous_scale='RdBu',
                    aspect='auto',
                    text_auto=True
                )
                fig_corr.update_layout(
                    xaxis_title="Vari√°veis",
                    yaxis_title="Vari√°veis"
                )
                st.plotly_chart(fig_corr, use_container_width=True)
            except Exception:
                st.info("Matriz de correla√ß√£o n√£o dispon√≠vel")
        
        with col2:
            try:
                # Scatter plot: Velocidade vs Pot√™ncia
                fig_scatter = px.scatter(
                    df_resultados.sample(min(1000, len(df_resultados))),  # Amostra para performance
                    x='velocidade_corrigida',
                    y='potencia_kw',
                    title="Velocidade vs Pot√™ncia",
                    labels={'velocidade_corrigida': 'Velocidade Corrigida (m/s)', 'potencia_kw': 'Pot√™ncia (kW)'},
                    color='estado_operacional',
                    color_discrete_map={
                        'inoperante': '#ff4444',
                        'mppt': '#ffaa00',
                        'nominal': '#44ff44',
                        'cut_out': '#ff0000'
                    }
                )
                st.plotly_chart(fig_scatter, use_container_width=True)
            except Exception:
                st.info("Gr√°fico de dispers√£o n√£o dispon√≠vel")
        
        # Estat√≠sticas avan√ßadas
        st.write("**üìà Estat√≠sticas Detalhadas:**")
        
        col1, col2, col3 = st.columns(3)
        
        with col1:
            st.write("**Pot√™ncia (kW):**")
            st.write(f"‚Ä¢ Mediana: {df_resultados['potencia_kw'].median():.1f} kW")
            st.write(f"‚Ä¢ Percentil 25: {df_resultados['potencia_kw'].quantile(0.25):.1f} kW")
            st.write(f"‚Ä¢ Percentil 75: {df_resultados['potencia_kw'].quantile(0.75):.1f} kW")
            st.write(f"‚Ä¢ Desvio padr√£o: {df_resultados['potencia_kw'].std():.1f} kW")
        
        with col2:
            st.write("**Velocidade (m/s):**")
            st.write(f"‚Ä¢ Mediana: {df_resultados['velocidade_corrigida'].median():.1f} m/s")
            st.write(f"‚Ä¢ M√≠nima: {df_resultados['velocidade_corrigida'].min():.1f} m/s")
            st.write(f"‚Ä¢ M√°xima: {df_resultados['velocidade_corrigida'].max():.1f} m/s")
            st.write(f"‚Ä¢ Desvio padr√£o: {df_resultados['velocidade_corrigida'].std():.1f} m/s")
        
        with col3:
            try:
                # Calcular efici√™ncia
                potencia_teorica_max = len(df_resultados) * float(turbina_info.rated_power_kw)
                eficiencia_real = (df_resultados['potencia_kw'].sum() / potencia_teorica_max) * 100
                
                st.write("**Efici√™ncia:**")
                st.write(f"‚Ä¢ Efici√™ncia real: {eficiencia_real:.1f}%")
                st.write(f"‚Ä¢ Horas operando: {len(df_resultados[df_resultados['potencia_kw'] > 0])}")
                st.write(f"‚Ä¢ Horas parada: {len(df_resultados[df_resultados['potencia_kw'] == 0])}")
                
                # Calcular disponibilidade
                disponibilidade = (len(df_resultados[df_resultados['estado_operacional'] != 'cut_out']) / len(df_resultados)) * 100
                st.write(f"‚Ä¢ Disponibilidade: {disponibilidade:.1f}%")
            except Exception:
                st.write("**Efici√™ncia:**\nDados n√£o dispon√≠veis")
        
        # Preparar dados de correla√ß√£o para download
        if 'correlation_data' in locals() and not correlation_data.empty:
            correlation_matrix = correlation_data.corr()
            criar_secao_download(correlation_matrix, "dados_correlacao", "Matriz de Correla√ß√£o")
                
    except Exception as correlation_error:
        st.warning(f"‚ö†Ô∏è Erro ao gerar an√°lise de correla√ß√µes: {str(correlation_error)}")
        st.info("An√°lise de correla√ß√µes n√£o dispon√≠vel.")
    
    # An√°lise hor√°ria (se houver dados suficientes)
    if len(df_resultados) > 24:
        st.markdown("""
        <div class="wind-info-card slide-in">
            <h4 class="wind-info-title">üïê An√°lise Hor√°ria de Gera√ß√£o</h4>
        </div>
        """, unsafe_allow_html=True)
        
        try:
            # Criar coluna de hora
            df_resultados['hora'] = pd.to_datetime(df_resultados['datetime']).dt.hour
            
            # Agregar por hora
            df_horario = df_resultados.groupby('hora').agg({
                'potencia_kw': ['mean', 'std'],
                'velocidade_corrigida': 'mean'
            }).round(2)
            
            # Flatten column names
            df_horario.columns = ['Pot√™ncia M√©dia (kW)', 'Desvio Padr√£o (kW)', 'Velocidade M√©dia (m/s)']
            df_horario = df_horario.reset_index()
            
            # Gr√°fico hor√°rio
            col1, col2 = st.columns(2)
            
            with col1:
                try:
                    fig_horario = px.line(
                        df_horario,
                        x='hora',
                        y='Pot√™ncia M√©dia (kW)',
                        title="Perfil de Gera√ß√£o por Hora do Dia",
                        labels={'hora': 'Hora do Dia', 'Pot√™ncia M√©dia (kW)': 'Pot√™ncia M√©dia (kW)'},
                        markers=True
                    )
                    fig_horario.update_traces(line_color='blue', marker_color='darkblue')
                    fig_horario.update_xaxes(dtick=2)  # Mostrar de 2 em 2 horas
                    st.plotly_chart(fig_horario, use_container_width=True)
                except Exception:
                    st.info("Gr√°fico hor√°rio n√£o dispon√≠vel")
            
            with col2:
                try:
                    fig_velocidade_horario = px.line(
                        df_horario,
                        x='hora',
                        y='Velocidade M√©dia (m/s)',
                        title="Perfil de Velocidade por Hora do Dia",
                        labels={'hora': 'Hora do Dia', 'Velocidade M√©dia (m/s)': 'Velocidade M√©dia (m/s)'},
                        markers=True
                    )
                    fig_velocidade_horario.update_traces(line_color='red', marker_color='darkred')
                    fig_velocidade_horario.update_xaxes(dtick=2)
                    st.plotly_chart(fig_velocidade_horario, use_container_width=True)
                except Exception:
                    st.info("Gr√°fico de velocidade hor√°rio n√£o dispon√≠vel")
            
            # Op√ß√µes de download para dados hor√°rios
            criar_secao_download(df_horario, "dados_horarios", "An√°lise Hor√°ria")
                    
        except Exception as hourly_error:
            st.warning(f"‚ö†Ô∏è Erro ao gerar an√°lise hor√°ria: {str(hourly_error)}")
            st.info("An√°lise hor√°ria n√£o dispon√≠vel.")
    
    # Resumo de performance
    st.markdown("""
    <div class="wind-info-card slide-in">
        <h4 class="wind-info-title">üìã Resumo de Performance</h4>
    </div>
    """, unsafe_allow_html=True)
    
    try:
        col1, col2 = st.columns(2)
        
        with col1:
            try:
                st.write("**M√©tricas de Gera√ß√£o:**")
                st.write(f"‚Ä¢ Energia total: {energia_total_kwh:.0f} kWh")
                st.write(f"‚Ä¢ Energia m√©dia di√°ria: {energia_total_kwh/parametros['periodo']:.1f} kWh/dia")
                st.write(f"‚Ä¢ Fator de capacidade: {fator_capacidade:.1f}%")
                st.write(f"‚Ä¢ Tempo produtivo: {porcentagens['mppt'] + porcentagens['nominal']:.1f}%")
            except Exception:
                st.write("**M√©tricas de Gera√ß√£o:**\nDados n√£o dispon√≠veis")
        
        with col2:
            try:
                st.write("**Condi√ß√µes de Vento:**")
                st.write(f"‚Ä¢ Velocidade m√©dia (10m): {df_resultados['velocidade_10m'].mean():.1f} m/s")
                st.write(f"‚Ä¢ Velocidade m√©dia ({parametros['altura']}m): {velocidade_media:.1f} m/s")
                st.write(f"‚Ä¢ Fator de corre√ß√£o: {velocidade_media/df_resultados['velocidade_10m'].mean():.2f}")
                st.write(f"‚Ä¢ M√©todo: {parametros['metodo'].title()}")
            except Exception:
                st.write("**Condi√ß√µes de Vento:**\nDados n√£o dispon√≠veis")
                
    except Exception as summary_error:
        st.warning(f"‚ö†Ô∏è Erro ao gerar resumo: {str(summary_error)}")
        st.info("Resumo de performance n√£o dispon√≠vel.")
    
    # Se√ß√£o de download dos dados completos
    st.markdown("""
    <div class="wind-info-card slide-in">
        <h4 class="wind-info-title">üì• Download dos Dados Completos</h4>
    </div>
    """, unsafe_allow_html=True)
    
    try:
        # Preparar dados completos para download
        dados_completos = df_resultados.copy()
        
        # Formatar datas para melhor legibilidade
        dados_completos['data_formatada'] = pd.to_datetime(dados_completos['datetime']).dt.strftime('%d/%m/%Y')
        dados_completos['hora_formatada'] = pd.to_datetime(dados_completos['datetime']).dt.strftime('%H:%M')
        
        # Reordenar colunas para melhor apresenta√ß√£o
        colunas_ordenadas = ['data_formatada', 'hora_formatada', 'velocidade_10m', 'velocidade_corrigida', 
                           'potencia_kw', 'estado_operacional']
        
        # Adicionar colunas adicionais se existirem
        for col in ['temperatura', 'umidade', 'pressao']:
            if col in dados_completos.columns:
                colunas_ordenadas.append(col)
        
        dados_para_download = dados_completos[colunas_ordenadas].rename(columns={
            'data_formatada': 'Data',
            'hora_formatada': 'Hora',
            'velocidade_10m': 'Velocidade 10m (m/s)',
            'velocidade_corrigida': f'Velocidade {parametros["altura"]}m (m/s)',
            'potencia_kw': 'Pot√™ncia (kW)',
            'estado_operacional': 'Estado Operacional',
            'temperatura': 'Temperatura (¬∞C)',
            'umidade': 'Umidade (%)',
            'pressao': 'Press√£o (hPa)'
        })
        
        criar_secao_download(dados_para_download, "dados_completos_analise", "Dados Completos da An√°lise")
        
    except Exception as download_error:
        st.warning(f"‚ö†Ô∏è Erro ao preparar downloads: {str(download_error)}")
        st.info("Downloads n√£o dispon√≠veis neste momento.")


def main():
    """Fun√ß√£o principal da p√°gina de an√°lise simplificada."""
    
    # Configurar tema dos gr√°ficos (se dispon√≠vel)
    try:
        import plotly.io as pio
        pio.templates.default = "plotly_white"
    except Exception:
        pass  # Continuar sem tema personalizado
    
   
    
    # Header
    st.markdown("""
    <div style="text-align: center; padding: 2rem; background: linear-gradient(90deg, #1e3c72 0%, #2a5298 100%); border-radius: 10px; margin-bottom: 2rem;">
        <h1 style="color: white; margin: 0;">‚ö° An√°lise de Gera√ß√£o E√≥licas</h1>
        <p style="color: #e8f4fd; margin: 0.5rem 0 0 0;">Previs√£o direta de gera√ß√£o de energia com dados reais do banco</p>
    </div>
    """, unsafe_allow_html=True)
    
    # Inicializar reposit√≥rios
    try:
        met_repo = MeteorologicalDataRepository()
        source_repo = MeteorologicalDataSourceRepository()
        cidade_repo = CidadeRepository()
        regiao_repo = RegiaoRepository()
        pais_repo = PaisRepository()
        aerogenerator_repo = AerogeneratorRepository()
        manufacturer_repo = ManufacturerRepository()
    except Exception as e:
        st.error(f"‚ùå Erro ao conectar com o banco de dados: {str(e)}")
        return
    
    # Sidebar com configura√ß√µes
    st.sidebar.header("‚öôÔ∏è Configura√ß√µes da An√°lise")
    
    # 1. Sele√ß√£o da cidade
    st.sidebar.markdown("""
    <div class="wind-info-card slide-in">
        <h4 class="wind-info-title">üåç Localiza√ß√£o</h4>
    </div>
    """, unsafe_allow_html=True)
    cidade_selecionada = None
    try:
        cidades_com_dados = met_repo.get_unique_cities_with_data()
        if not cidades_com_dados:
            st.sidebar.error("‚ùå Nenhuma cidade com dados meteorol√≥gicos encontrada.")
            st.sidebar.info("üí° Cadastre dados meteorol√≥gicos primeiro.")
            return
        
        opcoes_cidades = []
        cidades_dict = {}
        
        for cidade_info in cidades_com_dados:
            try:
                cidade_id = cidade_info['cidade_id']
                cidade_data = cidade_repo.buscar_por_id(cidade_id)
                
                if cidade_data:
                    regiao_data = regiao_repo.buscar_por_id(cidade_data.regiao_id)
                    pais_data = pais_repo.buscar_por_id(regiao_data.pais_id)
                    
                    opcao = f"{cidade_data.nome}, {regiao_data.nome}"
                    opcoes_cidades.append(opcao)
                    cidades_dict[opcao] = {
                        'cidade': cidade_data,
                        'regiao': regiao_data,
                        'pais': pais_data,
                        'dados_count': cidade_info['dados_count']
                    }
            except Exception as cidade_error:
                st.sidebar.warning(f"‚ö†Ô∏è Erro ao processar cidade {cidade_info.get('cidade_id', 'N/A')}: {str(cidade_error)}")
                continue
        
        if not opcoes_cidades:
            st.sidebar.error("‚ùå Nenhuma cidade v√°lida encontrada.")
            return
        
        cidade_selecionada_key = st.sidebar.selectbox(
            "Cidade:",
            opcoes_cidades,
            help="Cidade com dados meteorol√≥gicos"
        )
        
        cidade_selecionada = cidades_dict.get(cidade_selecionada_key)
        
    except Exception as e:
        st.sidebar.error(f"‚ùå Erro ao carregar cidades: {str(e)}")
        with st.sidebar.expander("üîß Detalhes do Erro"):
            st.code(str(e))
        return
    
    # 2. Sele√ß√£o da turbina
    st.sidebar.markdown("""
    <div class="wind-info-card slide-in">
        <h4 class="wind-info-title">üåÄ Turbina</h4>
    </div>
    """, unsafe_allow_html=True)
    turbina_selecionada = None
    try:
        fabricantes = manufacturer_repo.listar_todos()
        if not fabricantes:
            st.sidebar.error("‚ùå Nenhum fabricante encontrado no banco de dados.")
            st.sidebar.info("üí° Cadastre fabricantes e turbinas primeiro.")
            return
        
        opcoes_fabricantes = [f.name for f in fabricantes]
        fabricante_selecionado_nome = st.sidebar.selectbox("Fabricante:", opcoes_fabricantes)
        
        # Encontrar ID do fabricante
        try:
            fabricante_id = next(f.id for f in fabricantes if f.name == fabricante_selecionado_nome)
        except StopIteration:
            st.sidebar.error("‚ùå Fabricante selecionado n√£o encontrado.")
            return
        
        # Buscar turbinas do fabricante
        try:
            aerogeneradores = aerogenerator_repo.buscar_por_fabricante(fabricante_id)
            if not aerogeneradores:
                st.sidebar.error("‚ùå Nenhuma turbina encontrada para este fabricante.")
                st.sidebar.info("üí° Cadastre turbinas para este fabricante.")
                return
            
            opcoes_turbinas = [f"{aero.model} ({aero.rated_power_kw}kW)" for aero in aerogeneradores]
            turbina_selecionada_nome = st.sidebar.selectbox("Turbina:", opcoes_turbinas)
            
            # Encontrar turbina selecionada
            try:
                turbina_index = opcoes_turbinas.index(turbina_selecionada_nome)
                turbina_selecionada = aerogeneradores[turbina_index]
            except (ValueError, IndexError):
                st.sidebar.error("‚ùå Turbina selecionada n√£o encontrada.")
                return
                
        except Exception as turb_error:
            st.sidebar.error(f"‚ùå Erro ao carregar turbinas: {str(turb_error)}")
            return
        
    except Exception as e:
        st.sidebar.error(f"‚ùå Erro ao carregar dados de turbinas: {str(e)}")
        with st.sidebar.expander("üîß Detalhes do Erro"):
            st.code(str(e))
        return
    
    # 3. Configura√ß√µes de an√°lise
    st.sidebar.markdown("""
    <div class="wind-info-card slide-in">
        <h4 class="wind-info-title">üìä Par√¢metros de An√°lise</h4>
    </div>
    """, unsafe_allow_html=True)
    
    metodo_projecao = st.sidebar.selectbox(
        "M√©todo de Proje√ß√£o:",
        ["potencia", "logaritmica"],
        format_func=lambda x: "Lei de Pot√™ncia" if x == "potencia" else "Lei Logar√≠tmica"
    )
    
    # Par√¢metros espec√≠ficos do m√©todo
    if metodo_projecao == "potencia":
        terreno_tipo = st.sidebar.selectbox(
            "Tipo de Terreno:",
            ["agua", "plano", "pastagem", "arvores", "floresta", "cidade"],
            index=2,  # pastagem como padr√£o
            format_func=lambda x: {
                "agua": "√Ågua/Lagos (n=0.10)",
                "plano": "Terreno Plano (n=0.16)", 
                "pastagem": "Pastagem (n=0.20)",
                "arvores": "√Årvores Esparsas (n=0.22)",
                "floresta": "Floresta (n=0.28)",
                "cidade": "√Årea Urbana (n=0.40)"
            }[x]
        )
        
        parametros_terreno = {
            "agua": {"n": 0.10, "z0": 0.0002},
            "plano": {"n": 0.16, "z0": 0.03},
            "pastagem": {"n": 0.20, "z0": 0.10},
            "arvores": {"n": 0.22, "z0": 0.25},
            "floresta": {"n": 0.28, "z0": 1.00},
            "cidade": {"n": 0.40, "z0": 2.00}
        }
        
        parametros = parametros_terreno[terreno_tipo]
        st.sidebar.info(f"**Expoente n:** {parametros['n']}")
        
    else:  # logaritmica
        terreno_tipo = st.sidebar.selectbox(
            "Tipo de Terreno:",
            ["agua", "plano", "pastagem", "arvores", "floresta", "cidade"],
            index=2,  # pastagem como padr√£o
            format_func=lambda x: {
                "agua": "√Ågua/Lagos (z0=0.0002m)",
                "plano": "Terreno Plano (z0=0.03m)",
                "pastagem": "Pastagem (z0=0.10m)",
                "arvores": "√Årvores Esparsas (z0=0.25m)",
                "floresta": "Floresta (z0=1.00m)",
                "cidade": "√Årea Urbana (z0=2.00m)"
            }[x]
        )
        
        parametros_terreno = {
            "agua": {"n": 0.10, "z0": 0.0002},
            "plano": {"n": 0.16, "z0": 0.03},
            "pastagem": {"n": 0.20, "z0": 0.10},
            "arvores": {"n": 0.22, "z0": 0.25},
            "floresta": {"n": 0.28, "z0": 1.00},
            "cidade": {"n": 0.40, "z0": 2.00}
        }
        
        parametros = parametros_terreno[terreno_tipo]
        st.sidebar.info(f"**Rugosidade z0:** {parametros['z0']} m")
    
    altura_turbina = st.sidebar.number_input(
        "Altura da Turbina (m):",
        min_value=20.0,
        max_value=150.0,
        value=80.0,
        step=5.0
    )
    
    fonte_dados = st.sidebar.selectbox(
        "Fonte dos Dados:",
        ["nasa_power", "openmeteo"],
        format_func=lambda x: "NASA Power" if x == "nasa_power" else "OpenMeteo"
    )
    
    # Per√≠odo de an√°lise
    st.sidebar.markdown("""
    <div class="wind-info-card slide-in">
        <h4 class="wind-info-title">üìÖ Per√≠odo</h4>
    </div>
    """, unsafe_allow_html=True)
    
    # Verificar datas dispon√≠veis para a cidade selecionada
    try:
        if cidade_selecionada:
            cidade_id = cidade_selecionada['cidade'].id
            dados_cidade = met_repo.buscar_por_cidade(cidade_id)
            
            if dados_cidade:
                # Obter datas m√≠nima e m√°xima dispon√≠veis
                datas_disponiveis = [d.data_hora.date() for d in dados_cidade]
                data_min = min(datas_disponiveis)
                data_max = max(datas_disponiveis)
                total_dias = (data_max - data_min).days + 1
                
                st.sidebar.info(f"""
                **üìä Dados Dispon√≠veis:**
                ‚Ä¢ De: {data_min.strftime('%d/%m/%Y')}
                ‚Ä¢ At√©: {data_max.strftime('%d/%m/%Y')}
                ‚Ä¢ Total: {total_dias} dias
                ‚Ä¢ Registros: {len(dados_cidade)}
                """)
                
                # Op√ß√µes de per√≠odo baseadas nos dados dispon√≠veis
                opcoes_periodo = []
                if total_dias >= 30:
                    opcoes_periodo.append(30)
                if total_dias >= 60:
                    opcoes_periodo.append(60)
                if total_dias >= 90:
                    opcoes_periodo.append(90)
                if total_dias >= 180:
                    opcoes_periodo.append(180)
                if total_dias >= 365:
                    opcoes_periodo.append(365)
                
                # Sempre incluir a op√ß√£o de usar todos os dados
                opcoes_periodo.append(total_dias)
                
                periodo_dias = st.sidebar.selectbox(
                    "Per√≠odo de An√°lise:",
                    opcoes_periodo,
                    index=min(2, len(opcoes_periodo)-1),  # Padr√£o: 90 dias ou menor dispon√≠vel
                    format_func=lambda x: f"√öltimos {x} dias" if x != total_dias else f"Todos os dados ({x} dias)"
                )
            else:
                # Fallback se n√£o h√° dados
                periodo_dias = st.sidebar.selectbox(
                    "Per√≠odo de An√°lise:",
                    [30, 60, 90, 180, 365],
                    index=2,
                    format_func=lambda x: f"√öltimos {x} dias"
                )
        else:
            # Fallback se cidade n√£o selecionada
            periodo_dias = st.sidebar.selectbox(
                "Per√≠odo de An√°lise:",
                [30, 60, 90, 180, 365],
                index=2,
                format_func=lambda x: f"√öltimos {x} dias"
            )
    except Exception as periodo_error:
        st.sidebar.warning(f"‚ö†Ô∏è Erro ao verificar per√≠odo: {str(periodo_error)}")
        periodo_dias = st.sidebar.selectbox(
            "Per√≠odo de An√°lise:",
            [30, 60, 90, 180, 365],
            index=2,
            format_func=lambda x: f"√öltimos {x} dias"
        )
    
    # Bot√£o de an√°lise
    if st.sidebar.button("üöÄ Executar An√°lise", type="primary"):
        
        # Verificar se dados necess√°rios est√£o dispon√≠veis
        if not cidade_selecionada:
            st.error("‚ùå Selecione uma cidade v√°lida primeiro.")
            return
            
        if not turbina_selecionada:
            st.error("‚ùå Selecione uma turbina v√°lida primeiro.")
            return
        
        with st.spinner("Executando an√°lise simplificada..."):
            try:
                # Carregar dados meteorol√≥gicos
                try:
                    cidade_id = cidade_selecionada['cidade'].id
                    data_fim = datetime.now().date()
                    data_inicio = data_fim - timedelta(days=periodo_dias)
                    
                    # Buscar dados sem filtro de per√≠odo primeiro
                    dados_met = met_repo.buscar_por_cidade(cidade_id)
                    
                    if not dados_met:
                        st.error("‚ùå Nenhum dado meteorol√≥gico encontrado para esta cidade.")
                        st.info("üí° Verifique se os dados meteorol√≥gicos foram coletados para esta cidade.")
                        return
                
                except Exception as met_error:
                    st.error(f"‚ùå Erro ao carregar dados meteorol√≥gicos: {str(met_error)}")
                    return
                
                # Buscar informa√ß√µes das fontes de dados
                try:
                    sources = source_repo.listar_todos()
                    source_map = {source.name.lower(): source.id for source in sources}
                    
                    # Obter todas as datas dispon√≠veis primeiro
                    todas_datas = [d.data_hora.date() for d in dados_met]
                    data_mais_recente = max(todas_datas)
                    data_mais_antiga = min(todas_datas)
                    
                    # Calcular data de in√≠cio baseada no per√≠odo selecionado
                    if periodo_dias == len(dados_met) or periodo_dias >= (data_mais_recente - data_mais_antiga).days:
                        # Usar todos os dados dispon√≠veis
                        data_inicio = data_mais_antiga
                        data_fim = data_mais_recente
                        st.info(f"üìä Usando todos os dados dispon√≠veis: {data_inicio.strftime('%d/%m/%Y')} a {data_fim.strftime('%d/%m/%Y')}")
                    else:
                        # Usar per√≠odo espec√≠fico a partir da data mais recente
                        data_fim = data_mais_recente
                        data_inicio = data_fim - timedelta(days=periodo_dias-1)
                        
                        # Verificar se a data de in√≠cio calculada n√£o √© anterior aos dados dispon√≠veis
                        if data_inicio < data_mais_antiga:
                            data_inicio = data_mais_antiga
                            st.warning(f"‚ö†Ô∏è Per√≠odo ajustado: usando dados de {data_inicio.strftime('%d/%m/%Y')} a {data_fim.strftime('%d/%m/%Y')}")
                        else:
                            st.info(f"üìä Analisando per√≠odo: {data_inicio.strftime('%d/%m/%Y')} a {data_fim.strftime('%d/%m/%Y')}")
                    
                    # Filtrar por per√≠odo usando as datas calculadas
                    dados_met = [d for d in dados_met if data_inicio <= d.data_hora.date() <= data_fim]
                    
                    if not dados_met:
                        st.error("‚ùå Nenhum dado encontrado no per√≠odo especificado.")
                        return
                    
                    # Filtrar por fonte se especificado
                    fonte_id = source_map.get(fonte_dados.lower())
                    if fonte_id:
                        dados_fonte = [d for d in dados_met if d.meteorological_data_source_id == fonte_id]
                        if dados_fonte:
                            dados_met = dados_fonte
                            st.success(f"‚úÖ Usando dados da fonte {fonte_dados.upper()}: {len(dados_met)} registros")
                        else:
                            st.warning(f"‚ö†Ô∏è Dados da fonte {fonte_dados} n√£o encontrados. Usando dados dispon√≠veis: {len(dados_met)} registros")
                    else:
                        st.info(f"‚ÑπÔ∏è Usando todos os dados dispon√≠veis: {len(dados_met)} registros")
                    
                    if not dados_met:
                        st.error("‚ùå Nenhum dado meteorol√≥gico encontrado ap√≥s filtros.")
                        return
                        
                except Exception as filter_error:
                    st.error(f"‚ùå Erro ao filtrar dados: {str(filter_error)}")
                    return
                
                # Preparar especifica√ß√µes da turbina
                try:
                    turbina_specs = {
                        'model': turbina_selecionada.model,
                        'rated_power_kw': float(turbina_selecionada.rated_power_kw),
                        'rotor_diameter_m': float(turbina_selecionada.rotor_diameter_m),
                        'cut_in_speed': float(turbina_selecionada.cut_in_speed),
                        'cut_out_speed': float(turbina_selecionada.cut_out_speed),
                        'rated_wind_speed': float(turbina_selecionada.rated_wind_speed)
                    }
                except Exception as spec_error:
                    st.error(f"‚ùå Erro ao processar especifica√ß√µes da turbina: {str(spec_error)}")
                    return
                
                # Processar dados
                resultados = []
                errors_count = 0
                for i, dado in enumerate(dados_met):
                    try:
                        # Verificar se dados essenciais est√£o dispon√≠veis
                        if dado.velocidade_vento is None:
                            errors_count += 1
                            continue
                            
                        # Corrigir velocidade para altura da turbina
                        velocidade_corrigida = calcular_velocidade_corrigida(
                            float(dado.velocidade_vento),  # Converter para float
                            altura_turbina,
                            metodo_projecao,
                            parametros
                        )
                        
                        # Calcular pot√™ncia
                        potencia = calcular_potencia_turbina(velocidade_corrigida, turbina_specs)
                        
                        # Classificar estado operacional
                        estado = classificar_estado_operacional(velocidade_corrigida, turbina_specs)
                        
                        resultados.append({
                            'datetime': dado.data_hora,  # Usar o atributo correto
                            'velocidade_10m': float(dado.velocidade_vento),  # Converter para float
                            'velocidade_corrigida': velocidade_corrigida,
                            'potencia_kw': potencia,
                            'estado_operacional': estado,
                            'temperatura': float(dado.temperatura) if dado.temperatura else None,
                            'umidade': float(dado.umidade) if dado.umidade else None
                        })
                        
                    except Exception as calc_error:
                        errors_count += 1
                        if errors_count <= 5:  # Mostrar apenas os primeiros 5 erros
                            st.warning(f"‚ö†Ô∏è Erro ao processar registro {i+1}: {str(calc_error)}")
                        continue
                
                if errors_count > 0:
                    st.info(f"‚ÑπÔ∏è {errors_count} registros foram ignorados devido a erros nos dados.")
                
                if not resultados:
                    st.error("‚ùå Nenhum resultado v√°lido foi gerado. Verifique a qualidade dos dados.")
                    return
                
                # Converter para DataFrame
                try:
                    df_resultados = pd.DataFrame(resultados)
                    df_resultados['data'] = pd.to_datetime(df_resultados['datetime']).dt.date
                    
                    # Salvar resultados no session state
                    st.session_state['analise_simplificada'] = {
                        'df_resultados': df_resultados,
                        'cidade_info': cidade_selecionada,
                        'turbina_info': turbina_selecionada,
                        'parametros_analise': {
                            'metodo': metodo_projecao,
                            'altura': altura_turbina,
                            'fonte': fonte_dados,
                            'periodo': periodo_dias,
                            'parametros_terreno': parametros
                        }
                    }
                    
                    st.success("‚úÖ An√°lise conclu√≠da!")
                    
                except Exception as df_error:
                    st.error(f"‚ùå Erro ao processar resultados: {str(df_error)}")
                    return
                
            except Exception as e:
                st.error(f"‚ùå Erro geral na an√°lise: {str(e)}")
                with st.expander("üîß Detalhes T√©cnicos do Erro"):
                    import traceback
                    st.code(traceback.format_exc())
                return
    
    # Exibir resultados se dispon√≠veis
    if 'analise_simplificada' in st.session_state:
        try:
            exibir_resultados()
        except Exception as results_error:
            st.error(f"‚ùå Erro ao exibir resultados: {str(results_error)}")
            with st.expander("üîß Detalhes do Erro"):
                import traceback
                st.code(traceback.format_exc())
            
            # Bot√£o para limpar resultados em caso de erro
            if st.button("üóëÔ∏è Limpar Resultados"):
                if 'analise_simplificada' in st.session_state:
                    del st.session_state['analise_simplificada']
                st.rerun()


if __name__ == "__main__":
    try:
        main()
    except Exception as main_error:
        st.error(f"""
        # üö® Erro Cr√≠tico na An√°lise Simplificada
        
        A p√°gina encontrou um erro inesperado.
        
        **Erro:** {str(main_error)}
        
        **Solu√ß√µes:**
        1. Recarregue a p√°gina (F5)
        2. Verifique se todos os dados necess√°rios est√£o cadastrados
        3. Contate o suporte t√©cnico se o problema persistir
        """)
        
        with st.expander("üîß Detalhes T√©cnicos"):
            import traceback
            st.code(traceback.format_exc())
        
        # Bot√µes de recupera√ß√£o
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üîÑ Recarregar P√°gina", type="primary"):
                st.rerun()
        
        with col2:
            if st.button("üè† Voltar ao Home"):
                st.switch_page("src/web/pages/0_home.py")
