#!/usr/bin/env python3
"""
Exemplo 7 - Teste e Valida√ß√£o de GeneratorTypes (Tipos de Gerador)

Este exemplo demonstra o uso completo da entidade GeneratorType e seu reposit√≥rio,
incluindo opera√ß√µes CRUD, valida√ß√µes e inicializa√ß√£o de tipos padr√£o.

Funcionalidades demonstradas:
- Cria√ß√£o e valida√ß√£o de tipos de gerador
- Opera√ß√µes CRUD (Create, Read, Update, Delete)
- Inicializa√ß√£o de tipos padr√£o (Synchronous, Asynchronous, PMSG, DFIG)
- Consultas por tipo e termo
- M√©todos de verifica√ß√£o espec√≠ficos para cada tipo
- Tratamento de erros e valida√ß√µes

Autor: andrevn
Data: 2025-01-27
"""

import sys
import os

# Adicionar o diret√≥rio src ao path para importa√ß√µes
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from turbine_parameters.generator_types import GeneratorType, GeneratorTypeRepository


def configurar_base_de_dados():
    """Cria as tabelas necess√°rias se n√£o existirem"""
    print("üîß Configurando base de dados...")
    
    repo = GeneratorTypeRepository()
    repo.criar_tabela()
    
    print("‚úÖ Tabela de tipos de gerador criada/verificada com sucesso!")
    print()


def exemplo_inicializacao_tipos_padrao():
    """Demonstra a inicializa√ß√£o dos tipos padr√£o"""
    print("üì¶ === EXEMPLO: Inicializa√ß√£o de Tipos Padr√£o ===")
    
    repo = GeneratorTypeRepository()
    
    print("Inicializando tipos padr√£o de gerador...")
    repo.inicializar_tipos_padrao()
    
    # Verificar tipos criados
    tipos_criados = repo.listar_todos()
    print(f"‚úÖ Total de tipos criados/verificados: {len(tipos_criados)}")
    
    for tipo in tipos_criados:
        print(f"   ‚Ä¢ {tipo.type}: {tipo.description}")
    
    print()
    return tipos_criados


def exemplo_validacoes():
    """Demonstra valida√ß√µes da entidade GeneratorType"""
    print("üîç === EXEMPLO: Valida√ß√µes de Tipos de Gerador ===")
    
    # Teste 1: Tipo obrigat√≥rio
    try:
        generator_type = GeneratorType(type="", description="Descri√ß√£o teste")
        print("‚ùå Deveria ter dado erro para tipo vazio")
    except ValueError as e:
        print(f"‚úÖ Valida√ß√£o tipo vazio: {e}")
    
    # Teste 2: Tipo muito longo
    try:
        generator_type = GeneratorType(type="A" * 150, description="Descri√ß√£o")
        print("‚ùå Deveria ter dado erro para tipo muito longo")
    except ValueError as e:
        print(f"‚úÖ Valida√ß√£o tipo longo: {e}")
    
    # Teste 3: Tipo inv√°lido
    try:
        generator_type = GeneratorType(type="UnknownType", description="Tipo inv√°lido")
        print("‚ùå Deveria ter dado erro para tipo inv√°lido")
    except ValueError as e:
        print(f"‚úÖ Valida√ß√£o tipo inv√°lido: {e}")
    
    # Teste 4: Descri√ß√£o muito longa
    try:
        generator_type = GeneratorType(
            type="PMSG",
            description="A" * 1200  # Mais de 1000 caracteres
        )
        print("‚ùå Deveria ter dado erro para descri√ß√£o muito longa")
    except ValueError as e:
        print(f"‚úÖ Valida√ß√£o descri√ß√£o longa: {e}")
    
    # Teste 5: Tipos v√°lidos
    tipos_validos = ["Synchronous", "Asynchronous", "PMSG", "DFIG"]
    for tipo in tipos_validos:
        try:
            generator_type = GeneratorType(
                type=tipo,
                description=f"Descri√ß√£o para {tipo}"
            )
            print(f"‚úÖ Tipo v√°lido criado: {generator_type.type}")
        except ValueError as e:
            print(f"‚ùå Erro inesperado para {tipo}: {e}")
    
    print()


def exemplo_metodos_verificacao():
    """Demonstra os m√©todos de verifica√ß√£o da entidade"""
    print("üîç === EXEMPLO: M√©todos de Verifica√ß√£o ===")
    
    tipos_para_testar = [
        ("Synchronous", "Gerador s√≠ncrono"),
        ("Asynchronous", "Gerador ass√≠ncrono"),
        ("PMSG", "Permanent Magnet Synchronous Generator"),
        ("DFIG", "Doubly Fed Induction Generator")
    ]
    
    for tipo_nome, descricao in tipos_para_testar:
        print(f"\\n{len(tipos_para_testar) - tipos_para_testar.index((tipo_nome, descricao)) + 1}. Testando tipo {tipo_nome}:")
        
        generator_type = GeneratorType(type=tipo_nome, description=descricao)
        
        print(f"   ‚Ä¢ is_synchronous(): {generator_type.is_synchronous()}")
        print(f"   ‚Ä¢ is_asynchronous(): {generator_type.is_asynchronous()}")
        print(f"   ‚Ä¢ is_pmsg(): {generator_type.is_pmsg()}")
        print(f"   ‚Ä¢ is_dfig(): {generator_type.is_dfig()}")
        print(f"   ‚Ä¢ get_full_name(): {generator_type.get_full_name()}")
    
    print()


def exemplo_operacoes_crud():
    """Demonstra opera√ß√µes CRUD completas"""
    print("üîÑ === EXEMPLO: Opera√ß√µes CRUD ===")
    
    repo = GeneratorTypeRepository()
    
    # CREATE - Criar um tipo de teste personalizado
    print("1. CREATE - Criando tipo de teste...")
    tipo_teste = GeneratorType(
        type="PMSG",  # Usar um tipo padr√£o para teste
        description="Tipo de teste para demonstra√ß√£o CRUD - PMSG Personalizado"
    )
    
    try:
        # Verificar se j√° existe
        tipo_existente = repo.buscar_por_tipo("PMSG")
        if not tipo_existente:
            type_id = repo.salvar(tipo_teste)
            print(f"‚úÖ Tipo criado com ID: {type_id}")
            tipo_para_teste = tipo_teste
        else:
            type_id = tipo_existente.id
            print(f"‚úÖ Usando tipo existente com ID: {type_id}")
            tipo_para_teste = tipo_existente
            
    except ValueError as e:
        print(f"‚ùå Erro ao criar: {e}")
        return
    
    # READ - Ler o tipo
    print("\\n2. READ - Buscando tipo...")
    tipo_encontrado = repo.buscar_por_id(type_id)
    if tipo_encontrado:
        print(f"‚úÖ Tipo encontrado: {tipo_encontrado.type}")
        print(f"   Descri√ß√£o: {tipo_encontrado.description}")
        print(f"   Nome completo: {tipo_encontrado.get_full_name()}")
    else:
        print("‚ùå Tipo n√£o encontrado")
        return
    
    # UPDATE - Atualizar o tipo (apenas se for espec√≠fico de teste)
    if "teste" in tipo_encontrado.description.lower():
        print("\\n3. UPDATE - Atualizando tipo...")
        tipo_encontrado.description = "Descri√ß√£o atualizada - PMSG de alta efici√™ncia"
        
        try:
            sucesso = repo.atualizar(tipo_encontrado)
            if sucesso:
                print("‚úÖ Tipo atualizado com sucesso")
                # Verificar a atualiza√ß√£o
                tipo_atualizado = repo.buscar_por_id(type_id)
                print(f"   Descri√ß√£o atualizada: {tipo_atualizado.description}")
            else:
                print("‚ùå Falha ao atualizar tipo")
        except ValueError as e:
            print(f"‚ùå Erro ao atualizar: {e}")
        
        # DELETE - Pergunta ao usu√°rio se deseja excluir
        print("\\n4. DELETE - Excluindo tipo de teste...")
        resposta = input("Deseja excluir o tipo de teste? (s/N): ").strip().lower()
        
        if resposta == 's':
            sucesso = repo.excluir(type_id)
            if sucesso:
                print("‚úÖ Tipo exclu√≠do com sucesso")
            else:
                print("‚ùå Falha ao excluir tipo")
        else:
            print("‚ö†Ô∏è  Tipo de teste mantido no banco")
    else:
        print("\\n3. UPDATE/DELETE - Pulando para tipos padr√£o (preserva√ß√£o)")
        print("   ‚ö†Ô∏è  Tipos padr√£o n√£o s√£o modificados neste exemplo")
    
    print()


def exemplo_consultas_especializadas():
    """Demonstra consultas especializadas"""
    print("üîç === EXEMPLO: Consultas Especializadas ===")
    
    repo = GeneratorTypeRepository()
    
    # Listar todos os tipos
    print("1. Listando todos os tipos de gerador:")
    todos_tipos = repo.listar_todos()
    for tipo in todos_tipos:
        print(f"   ‚Ä¢ {tipo.type}: {tipo.description}")
    
    # Buscar por tipo espec√≠fico
    print("\\n2. Buscando tipo 'PMSG':")
    tipo_pmsg = repo.buscar_por_tipo("PMSG")
    if tipo_pmsg:
        print(f"   ‚úÖ Encontrado: {tipo_pmsg.type}")
        print(f"      Descri√ß√£o: {tipo_pmsg.description}")
        print(f"      Nome completo: {tipo_pmsg.get_full_name()}")
    else:
        print("   ‚ùå Tipo 'PMSG' n√£o encontrado")
    
    # Buscar por termo
    print("\\n3. Buscando tipos com 'Synchronous' no nome ou descri√ß√£o:")
    tipos_synchronous = repo.buscar_por_termo("Synchronous")
    for tipo in tipos_synchronous:
        print(f"   ‚Ä¢ {tipo.type}: {tipo.get_full_name()}")
    
    # Verificar exist√™ncia
    print("\\n4. Verificando exist√™ncia de tipos:")
    tipos_para_verificar = ["PMSG", "DFIG", "DC", "AC"]
    for tipo_nome in tipos_para_verificar:
        existe = repo.existe_tipo(tipo_nome)
        status = "‚úÖ Existe" if existe else "‚ùå N√£o existe"
        print(f"   ‚Ä¢ {tipo_nome}: {status}")
    
    # Estat√≠sticas
    print("\\n5. Estat√≠sticas:")
    total = repo.contar_total()
    print(f"   ‚Ä¢ Total de tipos cadastrados: {total}")
    
    print()


def exemplo_conversao_dados():
    """Demonstra convers√£o de dados (to_dict/from_dict)"""
    print("üîÑ === EXEMPLO: Convers√£o de Dados ===")
    
    # Criar um tipo de gerador
    generator_type = GeneratorType(
        type="DFIG",
        description="Doubly Fed Induction Generator - controle independente de pot√™ncias"
    )
    
    # Converter para dicion√°rio
    print("1. Convertendo entidade para dicion√°rio:")
    type_dict = generator_type.to_dict()
    for key, value in type_dict.items():
        print(f"   {key}: {value}")
    
    # Converter de volta para entidade
    print("\\n2. Convertendo dicion√°rio de volta para entidade:")
    type_from_dict = GeneratorType.from_dict(type_dict)
    print(f"   Tipo: {type_from_dict.type}")
    print(f"   Descri√ß√£o: {type_from_dict.description}")
    print(f"   Nome completo: {type_from_dict.get_full_name()}")
    print(f"   √â DFIG: {type_from_dict.is_dfig()}")
    print(f"   √â PMSG: {type_from_dict.is_pmsg()}")
    
    print()


def exemplo_comparacao_tipos():
    """Demonstra compara√ß√£o entre diferentes tipos de geradores"""
    print("‚öñÔ∏è  === EXEMPLO: Compara√ß√£o de Tipos ===")
    
    # Criar diferentes tipos
    tipos = [
        GeneratorType(type="Synchronous", description="Gerador s√≠ncrono tradicional"),
        GeneratorType(type="Asynchronous", description="Gerador de indu√ß√£o"),
        GeneratorType(type="PMSG", description="Gerador s√≠ncrono com √≠m√£s permanentes"),
        GeneratorType(type="DFIG", description="Gerador de indu√ß√£o duplamente alimentado")
    ]
    
    print("Caracter√≠sticas dos diferentes tipos de geradores:")
    print()
    
    for tipo in tipos:
        print(f"üîπ {tipo.type} ({tipo.get_full_name()}):")
        print(f"   ‚Ä¢ Descri√ß√£o: {tipo.description}")
        
        # Caracter√≠sticas espec√≠ficas
        if tipo.is_synchronous():
            print("   ‚Ä¢ Caracter√≠sticas: Velocidade constante, conex√£o direta √† rede")
        elif tipo.is_asynchronous():
            print("   ‚Ä¢ Caracter√≠sticas: Mais simples, robusto, velocidade vari√°vel")
        elif tipo.is_pmsg():
            print("   ‚Ä¢ Caracter√≠sticas: Alta efici√™ncia, sem escovas, manuten√ß√£o reduzida")
        elif tipo.is_dfig():
            print("   ‚Ä¢ Caracter√≠sticas: Controle independente, efici√™ncia vari√°vel")
        
        print()


def exemplo_tratamento_erros():
    """Demonstra tratamento de erros e situa√ß√µes especiais"""
    print("‚ö†Ô∏è  === EXEMPLO: Tratamento de Erros ===")
    
    repo = GeneratorTypeRepository()
    
    # Tentativa de salvar tipo duplicado
    print("1. Tentando salvar tipo com nome duplicado:")
    try:
        # Primeiro, garantir que existe um tipo
        if not repo.existe_tipo("PMSG"):
            repo.inicializar_tipos_padrao()
        
        # Tentar salvar duplicado
        tipo_duplicado = GeneratorType(
            type="PMSG",
            description="Tentativa de duplica√ß√£o"
        )
        repo.salvar(tipo_duplicado)
        print("   ‚ùå Deveria ter dado erro para tipo duplicado")
    except ValueError as e:
        print(f"   ‚úÖ Erro capturado corretamente: {e}")
    
    # Buscar tipo inexistente
    print("\\n2. Buscando tipo inexistente:")
    tipo_inexistente = repo.buscar_por_id(99999)
    if tipo_inexistente is None:
        print("   ‚úÖ Retornou None para tipo inexistente")
    else:
        print("   ‚ùå Deveria ter retornado None")
    
    # Buscar por nome inexistente
    print("\\n3. Buscando por nome inexistente:")
    tipo_nome_inexistente = repo.buscar_por_tipo("UnknownGenerator")
    if tipo_nome_inexistente is None:
        print("   ‚úÖ Retornou None para nome inexistente")
    else:
        print("   ‚ùå Deveria ter retornado None")
    
    # Testar exclus√£o de tipo inexistente
    print("\\n4. Tentando excluir tipo inexistente:")
    sucesso = repo.excluir(99999)
    if not sucesso:
        print("   ‚úÖ Retornou False para ID inexistente")
    else:
        print("   ‚ùå Deveria ter retornado False")
    
    print()


def main():
    """Fun√ß√£o principal que executa todos os exemplos"""
    print("üå™Ô∏è  === SISTEMA DE VALIDA√á√ÉO: GENERATOR TYPES ===")
    print("Testando entidade GeneratorType e GeneratorTypeRepository")
    print("=" * 60)
    print()
    
    try:
        # Configurar base de dados
        configurar_base_de_dados()
        
        # Executar exemplos
        exemplo_validacoes()
        tipos_salvos = exemplo_inicializacao_tipos_padrao()
        exemplo_metodos_verificacao()
        exemplo_operacoes_crud()
        exemplo_consultas_especializadas()
        exemplo_conversao_dados()
        exemplo_comparacao_tipos()
        exemplo_tratamento_erros()
        
        print("üéâ === VALIDA√á√ÉO CONCLU√çDA COM SUCESSO! ===")
        print("Todos os testes de GeneratorTypes foram executados.")
        print("Verifique os resultados acima para confirmar o funcionamento.")
        
    except Exception as e:
        print(f"üí• Erro durante a execu√ß√£o: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
