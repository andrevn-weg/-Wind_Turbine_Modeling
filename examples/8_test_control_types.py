#!/usr/bin/env python3
"""
Exemplo 8 - Teste e Valida√ß√£o de ControlTypes (Tipos de Controle)

Este exemplo demonstra o uso completo da entidade ControlType e seu reposit√≥rio,
incluindo opera√ß√µes CRUD, valida√ß√µes e inicializa√ß√£o de tipos padr√£o.

Funcionalidades demonstradas:
- Cria√ß√£o e valida√ß√£o de tipos de controle
- Opera√ß√µes CRUD (Create, Read, Update, Delete)
- Inicializa√ß√£o de tipos padr√£o (Pitch, Stall, Active Stall)
- Consultas especializadas (controles com pitch, passivos)
- M√©todos de verifica√ß√£o espec√≠ficos para cada tipo
- Tratamento de erros e valida√ß√µes

Autor: andrevn
Data: 2025-01-27
"""

import sys
import os

# Adicionar o diret√≥rio src ao path para importa√ß√µes
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from turbine_parameters.control_types import ControlType, ControlTypeRepository


def configurar_base_de_dados():
    """Cria as tabelas necess√°rias se n√£o existirem"""
    print("üîß Configurando base de dados...")
    
    repo = ControlTypeRepository()
    repo.criar_tabela()
    
    print("‚úÖ Tabela de tipos de controle criada/verificada com sucesso!")
    print()


def exemplo_inicializacao_tipos_padrao():
    """Demonstra a inicializa√ß√£o dos tipos padr√£o"""
    print("üì¶ === EXEMPLO: Inicializa√ß√£o de Tipos Padr√£o ===")
    
    repo = ControlTypeRepository()
    
    print("Inicializando tipos padr√£o de controle...")
    repo.inicializar_tipos_padrao()
    
    # Verificar tipos criados
    tipos_criados = repo.listar_todos()
    print(f"‚úÖ Total de tipos criados/verificados: {len(tipos_criados)}")
    
    for tipo in tipos_criados:
        print(f"   ‚Ä¢ {tipo.type}: {tipo.description}")
    
    print()
    return tipos_criados


def exemplo_validacoes():
    """Demonstra valida√ß√µes da entidade ControlType"""
    print("üîç === EXEMPLO: Valida√ß√µes de Tipos de Controle ===")
    
    # Teste 1: Tipo obrigat√≥rio
    try:
        control_type = ControlType(type="", description="Descri√ß√£o teste")
        print("‚ùå Deveria ter dado erro para tipo vazio")
    except ValueError as e:
        print(f"‚úÖ Valida√ß√£o tipo vazio: {e}")
    
    # Teste 2: Tipo muito longo
    try:
        control_type = ControlType(type="A" * 150, description="Descri√ß√£o")
        print("‚ùå Deveria ter dado erro para tipo muito longo")
    except ValueError as e:
        print(f"‚úÖ Valida√ß√£o tipo longo: {e}")
    
    # Teste 3: Tipo inv√°lido
    try:
        control_type = ControlType(type="AutoPilot", description="Tipo inv√°lido")
        print("‚ùå Deveria ter dado erro para tipo inv√°lido")
    except ValueError as e:
        print(f"‚úÖ Valida√ß√£o tipo inv√°lido: {e}")
    
    # Teste 4: Descri√ß√£o muito longa
    try:
        control_type = ControlType(
            type="Pitch",
            description="A" * 1200  # Mais de 1000 caracteres
        )
        print("‚ùå Deveria ter dado erro para descri√ß√£o muito longa")
    except ValueError as e:
        print(f"‚úÖ Valida√ß√£o descri√ß√£o longa: {e}")
    
    # Teste 5: Tipos v√°lidos
    tipos_validos = ["Pitch", "Stall", "Active Stall"]
    for tipo in tipos_validos:
        try:
            control_type = ControlType(
                type=tipo,
                description=f"Descri√ß√£o para {tipo}"
            )
            print(f"‚úÖ Tipo v√°lido criado: {control_type.type}")
        except ValueError as e:
            print(f"‚ùå Erro inesperado para {tipo}: {e}")
    
    print()


def exemplo_metodos_verificacao():
    """Demonstra os m√©todos de verifica√ß√£o da entidade"""
    print("üîç === EXEMPLO: M√©todos de Verifica√ß√£o e Caracter√≠sticas ===")
    
    tipos_para_testar = [
        ("Pitch", "Controle ativo atrav√©s do √¢ngulo das p√°s"),
        ("Stall", "Controle passivo atrav√©s do stall aerodin√¢mico"),
        ("Active Stall", "Controle ativo do stall atrav√©s do √¢ngulo das p√°s")
    ]
    
    for tipo_nome, descricao in tipos_para_testar:
        print(f"\\n{tipos_para_testar.index((tipo_nome, descricao)) + 1}. Testando tipo {tipo_nome}:")
        
        control_type = ControlType(type=tipo_nome, description=descricao)
        
        print(f"   ‚Ä¢ is_pitch(): {control_type.is_pitch()}")
        print(f"   ‚Ä¢ is_stall(): {control_type.is_stall()}")
        print(f"   ‚Ä¢ is_active_stall(): {control_type.is_active_stall()}")
        print(f"   ‚Ä¢ requires_pitch_actuators(): {control_type.requires_pitch_actuators()}")
        print(f"   ‚Ä¢ is_passive_control(): {control_type.is_passive_control()}")
        print(f"   ‚Ä¢ get_control_mechanism(): {control_type.get_control_mechanism()}")
    
    print()


def exemplo_operacoes_crud():
    """Demonstra opera√ß√µes CRUD completas"""
    print("üîÑ === EXEMPLO: Opera√ß√µes CRUD ===")
    
    repo = ControlTypeRepository()
    
    # CREATE - Criar um tipo de teste personalizado
    print("1. CREATE - Criando tipo de teste...")
    tipo_teste = ControlType(
        type="Pitch",
        description="Tipo de teste para demonstra√ß√£o CRUD - Pitch Control Avan√ßado"
    )
    
    try:
        # Verificar se j√° existe
        tipo_existente = repo.buscar_por_tipo("Pitch")
        if not tipo_existente:
            type_id = repo.salvar(tipo_teste)
            print(f"‚úÖ Tipo criado com ID: {type_id}")
            tipo_para_teste = tipo_teste
        else:
            type_id = tipo_existente.id
            print(f"‚úÖ Usando tipo existente com ID: {type_id}")
            tipo_para_teste = tipo_existente
            
    except ValueError as e:
        print(f"‚ùå Erro ao criar: {e}")
        return
    
    # READ - Ler o tipo
    print("\\n2. READ - Buscando tipo...")
    tipo_encontrado = repo.buscar_por_id(type_id)
    if tipo_encontrado:
        print(f"‚úÖ Tipo encontrado: {tipo_encontrado.type}")
        print(f"   Descri√ß√£o: {tipo_encontrado.description}")
        print(f"   Mecanismo: {tipo_encontrado.get_control_mechanism()}")
        print(f"   Requer atuadores: {tipo_encontrado.requires_pitch_actuators()}")
    else:
        print("‚ùå Tipo n√£o encontrado")
        return
    
    # UPDATE - Atualizar o tipo (apenas se for espec√≠fico de teste)
    if "teste" in tipo_encontrado.description.lower():
        print("\\n3. UPDATE - Atualizando tipo...")
        tipo_encontrado.description = "Controle de pitch de alta precis√£o - Atualizado"
        
        try:
            sucesso = repo.atualizar(tipo_encontrado)
            if sucesso:
                print("‚úÖ Tipo atualizado com sucesso")
                # Verificar a atualiza√ß√£o
                tipo_atualizado = repo.buscar_por_id(type_id)
                print(f"   Descri√ß√£o atualizada: {tipo_atualizado.description}")
            else:
                print("‚ùå Falha ao atualizar tipo")
        except ValueError as e:
            print(f"‚ùå Erro ao atualizar: {e}")
        
        # DELETE - Pergunta ao usu√°rio se deseja excluir
        print("\\n4. DELETE - Excluindo tipo de teste...")
        resposta = input("Deseja excluir o tipo de teste? (s/N): ").strip().lower()
        
        if resposta == 's':
            sucesso = repo.excluir(type_id)
            if sucesso:
                print("‚úÖ Tipo exclu√≠do com sucesso")
            else:
                print("‚ùå Falha ao excluir tipo")
        else:
            print("‚ö†Ô∏è  Tipo de teste mantido no banco")
    else:
        print("\\n3. UPDATE/DELETE - Pulando para tipos padr√£o (preserva√ß√£o)")
        print("   ‚ö†Ô∏è  Tipos padr√£o n√£o s√£o modificados neste exemplo")
    
    print()


def exemplo_consultas_especializadas():
    """Demonstra consultas especializadas"""
    print("üîç === EXEMPLO: Consultas Especializadas ===")
    
    repo = ControlTypeRepository()
    
    # Listar todos os tipos
    print("1. Listando todos os tipos de controle:")
    todos_tipos = repo.listar_todos()
    for tipo in todos_tipos:
        print(f"   ‚Ä¢ {tipo.type}: {tipo.description}")
    
    # Buscar por tipo espec√≠fico
    print("\\n2. Buscando tipo 'Pitch':")
    tipo_pitch = repo.buscar_por_tipo("Pitch")
    if tipo_pitch:
        print(f"   ‚úÖ Encontrado: {tipo_pitch.type}")
        print(f"      Descri√ß√£o: {tipo_pitch.description}")
        print(f"      Mecanismo: {tipo_pitch.get_control_mechanism()}")
    else:
        print("   ‚ùå Tipo 'Pitch' n√£o encontrado")
    
    # Consultas especializadas
    print("\\n3. Tipos que requerem atuadores de pitch:")
    tipos_com_pitch = repo.listar_que_requerem_pitch()
    for tipo in tipos_com_pitch:
        control_obj = ControlType(type=tipo.type, description=tipo.description)
        print(f"   ‚Ä¢ {tipo.type} - Requer atuadores: {control_obj.requires_pitch_actuators()}")
    
    print("\\n4. Tipos de controle passivo:")
    tipos_passivos = repo.listar_controles_passivos()
    for tipo in tipos_passivos:
        control_obj = ControlType(type=tipo.type, description=tipo.description)
        print(f"   ‚Ä¢ {tipo.type} - Passivo: {control_obj.is_passive_control()}")
    
    # Buscar por termo
    print("\\n5. Buscando tipos com 'Stall' no nome ou descri√ß√£o:")
    tipos_stall = repo.buscar_por_termo("Stall")
    for tipo in tipos_stall:
        print(f"   ‚Ä¢ {tipo.type}: {tipo.description}")
    
    # Verificar exist√™ncia
    print("\\n6. Verificando exist√™ncia de tipos:")
    tipos_para_verificar = ["Pitch", "Stall", "Active Stall", "Manual"]
    for tipo_nome in tipos_para_verificar:
        existe = repo.existe_tipo(tipo_nome)
        status = "‚úÖ Existe" if existe else "‚ùå N√£o existe"
        print(f"   ‚Ä¢ {tipo_nome}: {status}")
    
    # Estat√≠sticas
    print("\\n7. Estat√≠sticas:")
    total = repo.contar_total()
    print(f"   ‚Ä¢ Total de tipos cadastrados: {total}")
    
    print()


def exemplo_conversao_dados():
    """Demonstra convers√£o de dados (to_dict/from_dict)"""
    print("üîÑ === EXEMPLO: Convers√£o de Dados ===")
    
    # Criar um tipo de controle
    control_type = ControlType(
        type="Active Stall",
        description="Controle ativo do stall atrav√©s do √¢ngulo das p√°s"
    )
    
    # Converter para dicion√°rio
    print("1. Convertendo entidade para dicion√°rio:")
    type_dict = control_type.to_dict()
    for key, value in type_dict.items():
        print(f"   {key}: {value}")
    
    # Converter de volta para entidade
    print("\\n2. Convertendo dicion√°rio de volta para entidade:")
    type_from_dict = ControlType.from_dict(type_dict)
    print(f"   Tipo: {type_from_dict.type}")
    print(f"   Descri√ß√£o: {type_from_dict.description}")
    print(f"   Mecanismo: {type_from_dict.get_control_mechanism()}")
    print(f"   √â Active Stall: {type_from_dict.is_active_stall()}")
    print(f"   Requer atuadores: {type_from_dict.requires_pitch_actuators()}")
    
    print()


def exemplo_comparacao_tipos():
    """Demonstra compara√ß√£o entre diferentes tipos de controle"""
    print("‚öñÔ∏è  === EXEMPLO: Compara√ß√£o de Tipos de Controle ===")
    
    # Criar diferentes tipos
    tipos = [
        ControlType(type="Pitch", description="Controle ativo atrav√©s do √¢ngulo das p√°s"),
        ControlType(type="Stall", description="Controle passivo atrav√©s do stall aerodin√¢mico"),
        ControlType(type="Active Stall", description="Controle ativo do stall")
    ]
    
    print("Caracter√≠sticas dos diferentes tipos de controle:")
    print()
    
    for tipo in tipos:
        print(f"üîπ {tipo.type}:")
        print(f"   ‚Ä¢ Descri√ß√£o: {tipo.description}")
        print(f"   ‚Ä¢ Mecanismo: {tipo.get_control_mechanism()}")
        print(f"   ‚Ä¢ Requer atuadores de pitch: {'Sim' if tipo.requires_pitch_actuators() else 'N√£o'}")
        print(f"   ‚Ä¢ √â controle passivo: {'Sim' if tipo.is_passive_control() else 'N√£o'}")
        
        # Caracter√≠sticas espec√≠ficas
        if tipo.is_pitch():
            print("   ‚Ä¢ Vantagens: M√°ximo controle, alta efici√™ncia")
            print("   ‚Ä¢ Complexidade: Alta (requer sistema hidr√°ulico/el√©trico)")
        elif tipo.is_stall():
            print("   ‚Ä¢ Vantagens: Simplicidade, robustez, baixo custo")
            print("   ‚Ä¢ Complexidade: Baixa (sem partes m√≥veis no rotor)")
        elif tipo.is_active_stall():
            print("   ‚Ä¢ Vantagens: Combina efici√™ncia e robustez")
            print("   ‚Ä¢ Complexidade: M√©dia (atuadores + design aerodin√¢mico)")
        
        print()


def exemplo_tratamento_erros():
    """Demonstra tratamento de erros e situa√ß√µes especiais"""
    print("‚ö†Ô∏è  === EXEMPLO: Tratamento de Erros ===")
    
    repo = ControlTypeRepository()
    
    # Tentativa de salvar tipo duplicado
    print("1. Tentando salvar tipo com nome duplicado:")
    try:
        # Primeiro, garantir que existe um tipo
        if not repo.existe_tipo("Pitch"):
            repo.inicializar_tipos_padrao()
        
        # Tentar salvar duplicado
        tipo_duplicado = ControlType(
            type="Pitch",
            description="Tentativa de duplica√ß√£o"
        )
        repo.salvar(tipo_duplicado)
        print("   ‚ùå Deveria ter dado erro para tipo duplicado")
    except ValueError as e:
        print(f"   ‚úÖ Erro capturado corretamente: {e}")
    
    # Buscar tipo inexistente
    print("\\n2. Buscando tipo inexistente:")
    tipo_inexistente = repo.buscar_por_id(99999)
    if tipo_inexistente is None:
        print("   ‚úÖ Retornou None para tipo inexistente")
    else:
        print("   ‚ùå Deveria ter retornado None")
    
    # Buscar por nome inexistente
    print("\\n3. Buscando por nome inexistente:")
    tipo_nome_inexistente = repo.buscar_por_tipo("AutoPilot")
    if tipo_nome_inexistente is None:
        print("   ‚úÖ Retornou None para nome inexistente")
    else:
        print("   ‚ùå Deveria ter retornado None")
    
    # Testar exclus√£o de tipo inexistente
    print("\\n4. Tentando excluir tipo inexistente:")
    sucesso = repo.excluir(99999)
    if not sucesso:
        print("   ‚úÖ Retornou False para ID inexistente")
    else:
        print("   ‚ùå Deveria ter retornado False")
    
    print()


def exemplo_cenarios_aplicacao():
    """Demonstra cen√°rios de aplica√ß√£o dos diferentes tipos de controle"""
    print("üéØ === EXEMPLO: Cen√°rios de Aplica√ß√£o ===")
    
    repo = ControlTypeRepository()
    tipos = repo.listar_todos()
    
    if not tipos:
        repo.inicializar_tipos_padrao()
        tipos = repo.listar_todos()
    
    print("Cen√°rios recomendados para cada tipo de controle:")
    print()
    
    for tipo in tipos:
        control_obj = ControlType(type=tipo.type, description=tipo.description)
        print(f"üîπ {tipo.type}:")
        
        if control_obj.is_pitch():
            print("   ‚Ä¢ Cen√°rio ideal: Turbinas grandes (>1MW), ventos vari√°veis")
            print("   ‚Ä¢ Aplica√ß√£o: Parques e√≥licos comerciais, offshore")
            print("   ‚Ä¢ Benef√≠cios: M√°xima capta√ß√£o de energia, prote√ß√£o contra sobrecarga")
            
        elif control_obj.is_stall():
            print("   ‚Ä¢ Cen√°rio ideal: Turbinas pequenas/m√©dias, ventos constantes")
            print("   ‚Ä¢ Aplica√ß√£o: Sistemas distribu√≠dos, √°reas remotas")
            print("   ‚Ä¢ Benef√≠cios: Baixa manuten√ß√£o, alta confiabilidade")
            
        elif control_obj.is_active_stall():
            print("   ‚Ä¢ Cen√°rio ideal: Turbinas m√©dias, ventos moderadamente vari√°veis")
            print("   ‚Ä¢ Aplica√ß√£o: Parques onshore, sistemas h√≠bridos")
            print("   ‚Ä¢ Benef√≠cios: Equil√≠brio entre efici√™ncia e simplicidade")
        
        print()


def main():
    """Fun√ß√£o principal que executa todos os exemplos"""
    print("üå™Ô∏è  === SISTEMA DE VALIDA√á√ÉO: CONTROL TYPES ===")
    print("Testando entidade ControlType e ControlTypeRepository")
    print("=" * 60)
    print()
    
    try:
        # Configurar base de dados
        configurar_base_de_dados()
        
        # Executar exemplos
        exemplo_validacoes()
        tipos_salvos = exemplo_inicializacao_tipos_padrao()
        exemplo_metodos_verificacao()
        exemplo_operacoes_crud()
        exemplo_consultas_especializadas()
        exemplo_conversao_dados()
        exemplo_comparacao_tipos()
        exemplo_cenarios_aplicacao()
        exemplo_tratamento_erros()
        
        print("üéâ === VALIDA√á√ÉO CONCLU√çDA COM SUCESSO! ===")
        print("Todos os testes de ControlTypes foram executados.")
        print("Verifique os resultados acima para confirmar o funcionamento.")
        
    except Exception as e:
        print(f"üí• Erro durante a execu√ß√£o: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
