#!/usr/bin/env python3
"""
Exemplo 6 - Teste e Valida√ß√£o de TurbineTypes (Tipos de Turbina)

Este exemplo demonstra o uso completo da entidade TurbineType e seu reposit√≥rio,
incluindo opera√ß√µes CRUD, valida√ß√µes e inicializa√ß√£o de tipos padr√£o.

Funcionalidades demonstradas:
- Cria√ß√£o e valida√ß√£o de tipos de turbina
- Opera√ß√µes CRUD (Create, Read, Update, Delete)
- Inicializa√ß√£o de tipos padr√£o (Horizontal, Vertical)
- Consultas por tipo e termo
- M√©todos de verifica√ß√£o (is_horizontal, is_vertical)
- Tratamento de erros e valida√ß√µes

Autor: andrevn
Data: 2025-01-27
"""

import sys
import os

# Adicionar o diret√≥rio src ao path para importa√ß√µes
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', 'src'))

from turbine_parameters.turbine_types import TurbineType, TurbineTypeRepository


def configurar_base_de_dados():
    """Cria as tabelas necess√°rias se n√£o existirem"""
    print("üîß Configurando base de dados...")
    
    repo = TurbineTypeRepository()
    repo.criar_tabela()
    
    print("‚úÖ Tabela de tipos de turbina criada/verificada com sucesso!")
    print()


def exemplo_inicializacao_tipos_padrao():
    """Demonstra a inicializa√ß√£o dos tipos padr√£o"""
    print("üì¶ === EXEMPLO: Inicializa√ß√£o de Tipos Padr√£o ===")
    
    repo = TurbineTypeRepository()
    
    print("Inicializando tipos padr√£o de turbina...")
    repo.inicializar_tipos_padrao()
    
    # Verificar tipos criados
    tipos_criados = repo.listar_todos()
    print(f"‚úÖ Total de tipos criados/verificados: {len(tipos_criados)}")
    
    for tipo in tipos_criados:
        print(f"   ‚Ä¢ {tipo.type}: {tipo.description}")
    
    print()
    return tipos_criados


def exemplo_validacoes():
    """Demonstra valida√ß√µes da entidade TurbineType"""
    print("üîç === EXEMPLO: Valida√ß√µes de Tipos de Turbina ===")
    
    # Teste 1: Tipo obrigat√≥rio
    try:
        turbine_type = TurbineType(type="", description="Descri√ß√£o teste")
        print("‚ùå Deveria ter dado erro para tipo vazio")
    except ValueError as e:
        print(f"‚úÖ Valida√ß√£o tipo vazio: {e}")
    
    # Teste 2: Tipo muito longo
    try:
        turbine_type = TurbineType(type="A" * 150, description="Descri√ß√£o")
        print("‚ùå Deveria ter dado erro para tipo muito longo")
    except ValueError as e:
        print(f"‚úÖ Valida√ß√£o tipo longo: {e}")
    
    # Teste 3: Tipo inv√°lido
    try:
        turbine_type = TurbineType(type="Diagonal", description="Tipo inv√°lido")
        print("‚ùå Deveria ter dado erro para tipo inv√°lido")
    except ValueError as e:
        print(f"‚úÖ Valida√ß√£o tipo inv√°lido: {e}")
    
    # Teste 4: Descri√ß√£o muito longa
    try:
        turbine_type = TurbineType(
            type="Horizontal",
            description="A" * 1200  # Mais de 1000 caracteres
        )
        print("‚ùå Deveria ter dado erro para descri√ß√£o muito longa")
    except ValueError as e:
        print(f"‚úÖ Valida√ß√£o descri√ß√£o longa: {e}")
    
    # Teste 5: Tipos v√°lidos
    tipos_validos = ["Horizontal", "Vertical"]
    for tipo in tipos_validos:
        try:
            turbine_type = TurbineType(
                type=tipo,
                description=f"Descri√ß√£o para {tipo}"
            )
            print(f"‚úÖ Tipo v√°lido criado: {turbine_type.type}")
        except ValueError as e:
            print(f"‚ùå Erro inesperado para {tipo}: {e}")
    
    print()


def exemplo_metodos_verificacao():
    """Demonstra os m√©todos de verifica√ß√£o da entidade"""
    print("üîç === EXEMPLO: M√©todos de Verifica√ß√£o ===")
    
    # Testar tipo Horizontal
    tipo_horizontal = TurbineType(
        type="Horizontal",
        description="Turbina de eixo horizontal"
    )
    
    print("1. Testando tipo Horizontal:")
    print(f"   ‚Ä¢ is_horizontal(): {tipo_horizontal.is_horizontal()}")
    print(f"   ‚Ä¢ is_vertical(): {tipo_horizontal.is_vertical()}")
    
    # Testar tipo Vertical
    tipo_vertical = TurbineType(
        type="Vertical",
        description="Turbina de eixo vertical"
    )
    
    print("\\n2. Testando tipo Vertical:")
    print(f"   ‚Ä¢ is_horizontal(): {tipo_vertical.is_horizontal()}")
    print(f"   ‚Ä¢ is_vertical(): {tipo_vertical.is_vertical()}")
    
    print()


def exemplo_operacoes_crud():
    """Demonstra opera√ß√µes CRUD completas"""
    print("üîÑ === EXEMPLO: Opera√ß√µes CRUD ===")
    
    repo = TurbineTypeRepository()
    
    # CREATE - Criar um tipo de teste (se n√£o existir um dos padr√£o)
    print("1. CREATE - Verificando/criando tipo de teste...")
    
    # Primeiro, tentar buscar um tipo existente para teste
    tipo_teste = repo.buscar_por_tipo("Horizontal")
    
    if not tipo_teste:
        # Se n√£o existe, criar um novo tipo de teste
        tipo_teste = TurbineType(
            type="Horizontal",
            description="Tipo de teste para demonstra√ß√£o CRUD"
        )
        
        try:
            type_id = repo.salvar(tipo_teste)
            print(f"‚úÖ Tipo criado com ID: {type_id}")
        except ValueError as e:
            print(f"‚ùå Erro ao criar: {e}")
            return
    else:
        type_id = tipo_teste.id
        print(f"‚úÖ Usando tipo existente com ID: {type_id}")
    
    # READ - Ler o tipo
    print("\\n2. READ - Buscando tipo...")
    tipo_encontrado = repo.buscar_por_id(type_id)
    if tipo_encontrado:
        print(f"‚úÖ Tipo encontrado: {tipo_encontrado.type}")
        print(f"   Descri√ß√£o: {tipo_encontrado.description}")
    else:
        print("‚ùå Tipo n√£o encontrado")
        return
    
    # UPDATE - Atualizar o tipo (apenas se for um tipo de teste que criamos)
    if "teste" in tipo_encontrado.description.lower():
        print("\\n3. UPDATE - Atualizando tipo...")
        tipo_encontrado.description = "Descri√ß√£o atualizada para demonstra√ß√£o"
        
        try:
            sucesso = repo.atualizar(tipo_encontrado)
            if sucesso:
                print("‚úÖ Tipo atualizado com sucesso")
                # Verificar a atualiza√ß√£o
                tipo_atualizado = repo.buscar_por_id(type_id)
                print(f"   Descri√ß√£o atualizada: {tipo_atualizado.description}")
            else:
                print("‚ùå Falha ao atualizar tipo")
        except ValueError as e:
            print(f"‚ùå Erro ao atualizar: {e}")
        
        # DELETE - Pergunta ao usu√°rio se deseja excluir
        print("\\n4. DELETE - Excluindo tipo de teste...")
        resposta = input("Deseja excluir o tipo de teste? (s/N): ").strip().lower()
        
        if resposta == 's':
            sucesso = repo.excluir(type_id)
            if sucesso:
                print("‚úÖ Tipo exclu√≠do com sucesso")
            else:
                print("‚ùå Falha ao excluir tipo")
        else:
            print("‚ö†Ô∏è  Tipo de teste mantido no banco")
    else:
        print("\\n3. UPDATE/DELETE - Pulando para tipos padr√£o (preserva√ß√£o)")
        print("   ‚ö†Ô∏è  Tipos padr√£o n√£o s√£o modificados neste exemplo")
    
    print()


def exemplo_consultas_especializadas():
    """Demonstra consultas especializadas"""
    print("üîç === EXEMPLO: Consultas Especializadas ===")
    
    repo = TurbineTypeRepository()
    
    # Listar todos os tipos
    print("1. Listando todos os tipos de turbina:")
    todos_tipos = repo.listar_todos()
    for tipo in todos_tipos:
        print(f"   ‚Ä¢ {tipo.type}: {tipo.description}")
    
    # Buscar por tipo espec√≠fico
    print("\\n2. Buscando tipo 'Horizontal':")
    tipo_horizontal = repo.buscar_por_tipo("Horizontal")
    if tipo_horizontal:
        print(f"   ‚úÖ Encontrado: {tipo_horizontal.type}")
        print(f"      Descri√ß√£o: {tipo_horizontal.description}")
    else:
        print("   ‚ùå Tipo 'Horizontal' n√£o encontrado")
    
    # Buscar por termo
    print("\\n3. Buscando tipos com 'vertical' na descri√ß√£o:")
    tipos_vertical = repo.buscar_por_termo("vertical")
    for tipo in tipos_vertical:
        print(f"   ‚Ä¢ {tipo.type}: {tipo.description}")
    
    # Verificar exist√™ncia
    print("\\n4. Verificando exist√™ncia de tipos:")
    tipos_para_verificar = ["Horizontal", "Vertical", "Diagonal"]
    for tipo_nome in tipos_para_verificar:
        existe = repo.existe_tipo(tipo_nome)
        status = "‚úÖ Existe" if existe else "‚ùå N√£o existe"
        print(f"   ‚Ä¢ {tipo_nome}: {status}")
    
    # Estat√≠sticas
    print("\\n5. Estat√≠sticas:")
    total = repo.contar_total()
    print(f"   ‚Ä¢ Total de tipos cadastrados: {total}")
    
    print()


def exemplo_conversao_dados():
    """Demonstra convers√£o de dados (to_dict/from_dict)"""
    print("üîÑ === EXEMPLO: Convers√£o de Dados ===")
    
    # Criar um tipo de turbina
    turbine_type = TurbineType(
        type="Horizontal",
        description="Turbinas de eixo horizontal - mais comuns no mercado"
    )
    
    # Converter para dicion√°rio
    print("1. Convertendo entidade para dicion√°rio:")
    type_dict = turbine_type.to_dict()
    for key, value in type_dict.items():
        print(f"   {key}: {value}")
    
    # Converter de volta para entidade
    print("\\n2. Convertendo dicion√°rio de volta para entidade:")
    type_from_dict = TurbineType.from_dict(type_dict)
    print(f"   Tipo: {type_from_dict.type}")
    print(f"   Descri√ß√£o: {type_from_dict.description}")
    print(f"   √â horizontal: {type_from_dict.is_horizontal()}")
    print(f"   √â vertical: {type_from_dict.is_vertical()}")
    
    print()


def exemplo_tratamento_erros():
    """Demonstra tratamento de erros e situa√ß√µes especiais"""
    print("‚ö†Ô∏è  === EXEMPLO: Tratamento de Erros ===")
    
    repo = TurbineTypeRepository()
    
    # Tentativa de salvar tipo duplicado
    print("1. Tentando salvar tipo com nome duplicado:")
    try:
        # Primeiro, garantir que existe um tipo
        if not repo.existe_tipo("Horizontal"):
            repo.inicializar_tipos_padrao()
        
        # Tentar salvar duplicado
        tipo_duplicado = TurbineType(
            type="Horizontal",
            description="Tentativa de duplica√ß√£o"
        )
        repo.salvar(tipo_duplicado)
        print("   ‚ùå Deveria ter dado erro para tipo duplicado")
    except ValueError as e:
        print(f"   ‚úÖ Erro capturado corretamente: {e}")
    
    # Buscar tipo inexistente
    print("\\n2. Buscando tipo inexistente:")
    tipo_inexistente = repo.buscar_por_id(99999)
    if tipo_inexistente is None:
        print("   ‚úÖ Retornou None para tipo inexistente")
    else:
        print("   ‚ùå Deveria ter retornado None")
    
    # Buscar por nome inexistente
    print("\\n3. Buscando por nome inexistente:")
    tipo_nome_inexistente = repo.buscar_por_tipo("Diagonal")
    if tipo_nome_inexistente is None:
        print("   ‚úÖ Retornou None para nome inexistente")
    else:
        print("   ‚ùå Deveria ter retornado None")
    
    # Testar atualiza√ß√£o com ID inv√°lido
    print("\\n4. Tentando atualizar com ID inv√°lido:")
    tipo_invalido = TurbineType(type="Vertical", description="Teste com ID inv√°lido")
    tipo_invalido.id = 99999  # ID que n√£o existe
    try:
        sucesso = repo.atualizar(tipo_invalido)
        if not sucesso:
            print("   ‚úÖ Retornou False para ID inv√°lido")
        else:
            print("   ‚ùå Deveria ter retornado False")
    except ValueError as e:
        print(f"   ‚úÖ Erro de valida√ß√£o capturado: {e}")
    
    # Testar exclus√£o com ID inv√°lido
    print("\\n5. Tentando excluir com ID inv√°lido:")
    sucesso_exclusao = repo.excluir(99999)
    if not sucesso_exclusao:
        print("   ‚úÖ Retornou False para exclus√£o com ID inv√°lido")
    else:
        print("   ‚ùå Deveria ter retornado False")
    
    print()


def main():
    """Fun√ß√£o principal que executa todos os exemplos"""
    print("üå™Ô∏è  === SISTEMA DE VALIDA√á√ÉO: TURBINE TYPES ===")
    print("Testando entidade TurbineType e TurbineTypeRepository")
    print("=" * 60)
    print()
    
    try:
        # Configurar base de dados
        configurar_base_de_dados()
        
        # Executar exemplos
        exemplo_validacoes()
        tipos_salvos = exemplo_inicializacao_tipos_padrao()
        exemplo_metodos_verificacao()
        exemplo_operacoes_crud()
        exemplo_consultas_especializadas()
        exemplo_conversao_dados()
        exemplo_tratamento_erros()
        
        print("üéâ === VALIDA√á√ÉO CONCLU√çDA COM SUCESSO! ===")
        print("Todos os testes de TurbineTypes foram executados.")
        print("Verifique os resultados acima para confirmar o funcionamento.")
        
    except Exception as e:
        print(f"üí• Erro durante a execu√ß√£o: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
