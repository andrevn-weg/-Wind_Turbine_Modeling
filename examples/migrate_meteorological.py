#!/usr/bin/env python3
"""
Script de migra√ß√£o do banco de dados para o m√≥dulo meteorol√≥gico

Este script cria as tabelas meteorol√≥gicas e popula com dados iniciais b√°sicos.
Deve ser executado uma vez para configurar o banco de dados.

Autor: Andr√© Vin√≠cius Lima do Nascimento
Data: 2025
"""

import sys
import os

# Adicionar o diret√≥rio src ao path para importa√ß√µes
sys.path.append(os.path.join(os.path.dirname(__file__), '..', 'src'))

from meteorological import (
    MeteorologicalDataSourceRepository,
    MeteorologicalDataRepository,
    MeteorologicalDataSource
)


def criar_tabelas():
    """Cria as tabelas meteorol√≥gicas"""
    print("üîß Criando tabelas meteorol√≥gicas...")
    
    fonte_repo = MeteorologicalDataSourceRepository()
    dados_repo = MeteorologicalDataRepository()
    
    # Criar tabelas
    fonte_repo.criar_tabela()
    dados_repo.criar_tabela()
    
    print("‚úÖ Tabelas criadas com sucesso!")


def popular_fontes_basicas():
    """Popula o banco com fontes de dados meteorol√≥gicos b√°sicas"""
    print("üìä Populando fontes de dados b√°sicas...")
    
    repo = MeteorologicalDataSourceRepository()
    
    fontes_basicas = [
        MeteorologicalDataSource(
            name="NASA_POWER",
            description="NASA Prediction of Worldwide Energy Resources - Dados satelitais globais de energia solar e meteorologia"
        ),
        MeteorologicalDataSource(
            name="INMET",
            description="Instituto Nacional de Meteorologia - Dados meteorol√≥gicos oficiais do Brasil"
        ),
        MeteorologicalDataSource(
            name="OPEN_METEO",
            description="Open-Meteo API - Dados meteorol√≥gicos hist√≥ricos e previs√µes de c√≥digo aberto"
        ),
        MeteorologicalDataSource(
            name="MANUAL",
            description="Dados inseridos manualmente atrav√©s da interface do sistema"
        )
    ]
    
    fontes_criadas = 0
    for fonte in fontes_basicas:
        try:
            # Verificar se j√° existe
            fonte_existente = repo.buscar_por_nome(fonte.name)
            if not fonte_existente:
                fonte_id = repo.salvar(fonte)
                print(f"   ‚úÖ Criada: {fonte.name} (ID: {fonte_id})")
                fontes_criadas += 1
            else:
                print(f"   ‚ö†Ô∏è J√° existe: {fonte.name}")
        except Exception as e:
            print(f"   ‚ùå Erro ao criar {fonte.name}: {e}")
    
    print(f"‚úÖ {fontes_criadas} fontes criadas!")


def main():
    """Fun√ß√£o principal de migra√ß√£o"""
    print("üöÄ === MIGRA√á√ÉO DO BANCO DE DADOS METEOROL√ìGICO ===")
    print("Sistema de Simula√ß√£o de Turbinas E√≥licas\n")
    
    try:
        criar_tabelas()
        popular_fontes_basicas()
        
        print("\n‚úÖ === MIGRA√á√ÉO CONCLU√çDA COM SUCESSO ===")
        print("üéØ M√≥dulo meteorol√≥gico pronto para uso!")
        
    except Exception as e:
        print(f"\n‚ùå Erro durante a migra√ß√£o: {e}")
        import traceback
        traceback.print_exc()


if __name__ == "__main__":
    main()
